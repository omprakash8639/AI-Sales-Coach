import React, { useState, useRef } from "react";
import {
  User,
  CreditCard,
  Shield,
  Home,
  Heart,
  Mic,
  MicOff,
  Settings,
  Play,
  BarChart3,
  Sparkles,
  Brain,
  Target,
  Zap,
} from "lucide-react";

const analyticsData = {
  totalSessions: 24,
  averageScore: 78,
  improvementRate: 12,
  totalHours: 18.5,
  weeklyGoal: 20,
  streak: 5,
  recentSessions: [
    {
      date: "Today",
      score: 85,
      product: "Credit Card",
      persona: "Young Professional",
      duration: "12:45",
      objections: 3,
      closingRate: 85,
    },
    {
      date: "Yesterday",
      score: 72,
      product: "Health Insurance",
      persona: "Retiree",
      duration: "15:30",
      objections: 5,
      closingRate: 60,
    },
    {
      date: "2 days ago",
      score: 91,
      product: "Life Insurance",
      persona: "Family Person",
      duration: "11:20",
      objections: 2,
      closingRate: 95,
    },
    {
      date: "3 days ago",
      score: 68,
      product: "Home Loan",
      persona: "Skeptical Veteran",
      duration: "18:15",
      objections: 7,
      closingRate: 45,
    },
  ],
  skillBreakdown: [
    {
      skill: "Opening",
      score: 85,
      improvement: "+8%",
      trend: "up",
      lastWeek: 77,
    },
    {
      skill: "Needs Assessment",
      score: 72,
      improvement: "+15%",
      trend: "up",
      lastWeek: 57,
    },
    {
      skill: "Product Knowledge",
      score: 90,
      improvement: "+5%",
      trend: "up",
      lastWeek: 85,
    },
    {
      skill: "Objection Handling",
      score: 65,
      improvement: "+20%",
      trend: "up",
      lastWeek: 45,
    },
    {
      skill: "Closing",
      score: 80,
      improvement: "+10%",
      trend: "up",
      lastWeek: 70,
    },
  ],
  monthlyProgress: [
    { month: "Oct", score: 65 },
    { month: "Nov", score: 71 },
    { month: "Dec", score: 78 },
    { month: "Jan", score: 82 },
  ],
  personaPerformance: [
    { persona: "Young Professional", sessions: 8, avgScore: 82, winRate: 75 },
    { persona: "Retiree", sessions: 6, avgScore: 74, winRate: 65 },
    { persona: "Family Person", sessions: 5, avgScore: 85, winRate: 80 },
    { persona: "Skeptical Veteran", sessions: 5, avgScore: 68, winRate: 55 },
  ],
  productPerformance: [
    { product: "Credit Card", sessions: 7, avgScore: 79, conversionRate: 71 },
    {
      product: "Health Insurance",
      sessions: 6,
      avgScore: 75,
      conversionRate: 67,
    },
    {
      product: "Life Insurance",
      sessions: 6,
      avgScore: 83,
      conversionRate: 78,
    },
    { product: "Home Loan", sessions: 5, avgScore: 72, conversionRate: 60 },
  ],
  achievements: [
    {
      title: "First Success",
      description: "Completed your first training session",
      unlocked: true,
    },
    {
      title: "Consistent Learner",
      description: "Train for 5 days in a row",
      unlocked: true,
    },
    {
      title: "Objection Master",
      description: "Handle 10 objections successfully",
      unlocked: true,
    },
    {
      title: "Sales Expert",
      description: "Achieve 90+ score in a session",
      unlocked: true,
    },
    {
      title: "Product Specialist",
      description: "Master all 4 products",
      unlocked: false,
    },
    {
      title: "Persona Whisperer",
      description: "Excel with all customer types",
      unlocked: false,
    },
  ],
};

const FintechTrainingApp = () => {
  const [activeTab, setActiveTab] = useState("configure");
  const [selectedPersona, setSelectedPersona] = useState("young-professional");
  const [selectedProduct, setSelectedProduct] = useState("credit-card");
  const [voiceGender, setVoiceGender] = useState("female");
  const [voiceTone, setVoiceTone] = useState("neutral");
  const [isVoiceEnabled, setIsVoiceEnabled] = useState(true);
  const [difficulty, setDifficulty] = useState("medium");
  const [isTraining, setIsTraining] = useState(false);
  const [currentPhase, setCurrentPhase] = useState("greeting");
  const [isRecording, setIsRecording] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [conversation, setConversation] = useState([]);
  const [isSessionActive, setIsSessionActive] = useState(false);
  const websocketRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const audioChunksRef = useRef([]);
  const [isConnected, setIsConnected] = useState(false);
  const [aiResponse, setAiResponse] = useState(
    "Hello, I received a call about some financial products. To be honest, I'm quite busy and not really interested in another sales pitch. What makes your offering different?",
  );
  const [realAnalytics, setRealAnalytics] = useState(analyticsData);
  const [isLiveMode, setIsLiveMode] = useState(true);
  const [selectedVoice, setSelectedVoice] = useState("female");

  const personas = [
    {
      id: "young-professional",
      name: "Young Professional",
      age: "25-35",
      income: "Mid-High",
      icon: User,
      color: "linear-gradient(135deg, #3b82f6, #8b5cf6)",
      description: "Tech-savvy, ambitious, values efficiency",
    },
    {
      id: "retiree",
      name: "Retiree",
      age: "60+",
      income: "Fixed",
      icon: Heart,
      color: "linear-gradient(135deg, #10b981, #0d9488)",
      description: "Conservative, values security and stability",
    },
    {
      id: "family-oriented",
      name: "Family Person",
      age: "35-50",
      income: "Stable",
      icon: Home,
      color: "linear-gradient(135deg, #f97316, #dc2626)",
      description: "Protective, focused on family financial security",
    },
    {
      id: "skeptical-veteran",
      name: "Skeptical Veteran",
      age: "45-65",
      income: "High",
      icon: Shield,
      color: "linear-gradient(135deg, #64748b, #374151)",
      description: "Experienced, hard to convince, asks tough questions",
    },
  ];

  const products = [
    {
      id: "credit-card",
      name: "Platinum Credit Card",
      category: "Premium Cards",
      details: "2.5% cashback • No foreign fees • Premium rewards",
      icon: CreditCard,
      color: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
      features: ["Cashback Rewards", "Travel Benefits", "Purchase Protection"],
    },
    {
      id: "health-insurance",
      name: "Comprehensive Health Plan",
      category: "Health Coverage",
      details: "Full coverage • Wellness programs • Digital consultations",
      icon: Shield,
      color: "linear-gradient(135deg, #06b6d4, #3b82f6)",
      features: ["100% Coverage", "Preventive Care", "Mental Health"],
    },
    {
      id: "life-insurance",
      name: "Life Protection Plus",
      category: "Life Insurance",
      details: "Term & whole life • Investment component • Family protection",
      icon: Heart,
      color: "linear-gradient(135deg, #f43f5e, #ec4899)",
      features: ["Flexible Terms", "Investment Options", "Family Benefits"],
    },
    {
      id: "home-loan",
      name: "Smart Home Loan",
      category: "Property Finance",
      details: "Competitive rates • Fast approval • Digital process",
      icon: Home,
      color: "linear-gradient(135deg, #22c55e, #059669)",
      features: ["Low Interest", "Quick Processing", "Flexible EMI"],
    },
  ];

  const voiceOptions = {
    gender: [
      { id: "male", name: "Male", icon: "👨" },
      { id: "female", name: "Female", icon: "👩" },
      { id: "neutral", name: "Neutral", icon: "🤖" },
    ],
    tone: [
      { id: "neutral", name: "Neutral", emoji: "😐" },
      { id: "enthusiastic", name: "Enthusiastic", emoji: "😊" },
      { id: "skeptical", name: "Skeptical", emoji: "🤔" },
      { id: "friendly", name: "Friendly", emoji: "😄" },
      { id: "professional", name: "Professional", emoji: "💼" },
    ],
  };

  const difficultyLevels = [
    {
      id: "easy",
      name: "Beginner",
      color: "#22c55e",
      description: "Cooperative customer, basic objections",
    },
    {
      id: "medium",
      name: "Intermediate",
      color: "#eab308",
      description: "Moderate resistance, common objections",
    },
    {
      id: "hard",
      name: "Advanced",
      color: "#ef4444",
      description: "Challenging customer, complex objections",
    },
  ];

  // WebSocket connection setup
  const connectWebSocket = (sessionId) => {
    if (!sessionId) {
      console.error("Cannot connect WebSocket: sessionId is null");
      return;
    }

    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    const host = window.location.hostname.includes("replit")
      ? window.location.hostname
          .replace("-80", "-5000")
          .replace("-443", "-5000")
      : `${window.location.hostname}:5000`;
    const wsUrl = `${protocol}//${host}/ws/${sessionId}`;

    console.log("Connecting to WebSocket:", wsUrl);
    websocketRef.current = new WebSocket(wsUrl);

    websocketRef.current.onopen = () => {
      console.log("WebSocket connected");
      setIsConnected(true);
    };

    websocketRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log("WebSocket message received:", data);

          if (data.type === "listening_started") {
            console.log("Backend started listening");
          } else if (data.type === "listening_stopped") {
            console.log("Backend stopped listening");
          } else if (data.type === "transcription") {
            setConversation((prev) => [
              ...prev,
              { role: "user", content: data.text, timestamp: new Date() }
            ]);
          } else if (data.type === "ai_response") {
            // Add user message first if transcript exists
            if (data.transcript) {
              setConversation((prev) => [
                ...prev,
                { role: "user", content: data.transcript, timestamp: new Date() }
              ]);
            }

            // Then add AI response
            setConversation((prev) => [
              ...prev,
              { role: "assistant", content: data.text, timestamp: new Date() },
            ]);

            // Generate and play audio response
            generateAudioResponse(data.text);
          } else if (data.type === "error") {
            console.error("WebSocket error:", data.message);
          }
        } catch (error) {
          console.error("Error parsing WebSocket message:", error);
        }
      };

    websocketRef.current.onclose = () => {
      console.log("WebSocket disconnected");
      setIsConnected(false);
    };

    websocketRef.current.onerror = (error) => {
      console.error("WebSocket error:", error);
    };
  };

  const handleStartSession = async () => {
    try {
      const baseUrl = window.location.hostname.includes("replit")
        ? `${window.location.protocol}//${window.location.hostname.replace("-80", "-5000").replace("-443", "-5000")}`
        : "http://localhost:5000";

      const payload = {
        persona: selectedPersona || "young-professional",
        product: selectedProduct || "credit-card",
        difficulty: difficulty || "easy",
        voiceSettings: {
          gender: voiceGender || "female"
        }
      };

      console.log("📡 Sending POST to:", `${baseUrl}/session`);
      console.log("📦 Payload:", payload);

      const response = await fetch(`${baseUrl}/session`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("❌ Backend error:", errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log("✅ Session started:", data);

      if (data.success) {
        const newSessionId = data.sessionId;
        setSessionId(newSessionId);
        setConversation([
          {
            role: "assistant",
            content: data.initialResponse,
            timestamp: new Date(),
          },
        ]);
        setIsSessionActive(true);
        setActiveTab("practice");

        // Connect WebSocket after session is created
        setTimeout(() => {
          connectWebSocket(newSessionId);
        }, 500); // Increased delay to ensure sessionId is set

        // Generate and play initial audio
        generateAudioResponse(data.initialResponse);
      } else {
        console.error("API returned success: false", data);
        alert("Backend failed to start session.");
      }
    } catch (error) {
      console.error("Failed to start session:", error.message);
      alert("Failed to start session. Check backend or network.");
    }
  };

  // Initialize media recorder
  const initializeMediaRecorder = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        }
      });

      mediaRecorderRef.current = new MediaRecorder(stream, {
          mimeType: 'audio/webm;codecs=opus'
        });
      streamRef.current = stream;

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      // Handle when recording stops
      mediaRecorderRef.current.onstop = () => {
        console.log("MediaRecorder stopped, processing audio...");
        if (audioChunksRef.current.length > 0) {
          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
          console.log("Audio blob created, size:", audioBlob.size);
          processAudioBlob(audioBlob);
          // Clear chunks for next recording
          audioChunksRef.current = [];
        }
      };

      return mediaRecorderRef.current;
    } catch (error) {
      console.error("Failed to initialize media recorder:", error);
      alert(
        "Microphone access is required for voice training. Please allow microphone access and try again.",
      );
    }
  };

  // Process audio blob and send to WebSocket
  const processAudioBlob = async (audioBlob) => {
    if (!websocketRef.current || websocketRef.current.readyState !== WebSocket.OPEN) {
      console.error("WebSocket not connected");
      return;
    }

    console.log("Processing audio blob, size:", audioBlob.size);

    // For demo purposes, we'll simulate speech-to-text with realistic sales responses
    const simulatedTranscripts = [
      "Thank you for your time. I'd like to tell you about our amazing financial products that can help secure your future.",
      "Our premium credit card offers excellent cashback rewards and no foreign transaction fees.",
      "I understand your concerns. Let me explain how this product can benefit you specifically.",
      "Would you be interested in learning more about our flexible payment options?",
      "I appreciate your questions. This shows you're making an informed decision.",
      "Could you explain more about the fees and charges?",
      "What makes this different from other similar products?",
      "I'm looking for something with better rewards.",
      "How does the customer service work?",
      "What about the application process?",
      "Can you tell me about the annual fees?",
      "I already have a similar product from another company.",
      "What are the interest rates?",
      "Do you have any special promotions right now?",
      "I need to think about it and discuss with my family."
    ];

    const transcript = simulatedTranscripts[Math.floor(Math.random() * simulatedTranscripts.length)];

    console.log("Sending transcript to WebSocket:", transcript);

    // Send transcript data to WebSocket for processing
    try {
      websocketRef.current.send(
        JSON.stringify({
          type: "audio_chunk",
          transcript: transcript,
          sessionId: sessionId,
        }),
      );
    } catch (error) {
      console.error("Error sending WebSocket message:", error);
    }
  };

  const handleRecord = async () => {
    console.log("Handle record clicked, isRecording:", isRecording);
    console.log("WebSocket state:", websocketRef.current?.readyState);
    console.log("MediaRecorder state:", mediaRecorderRef.current?.state);

    if (!isRecording) {
      // Starting recording
      let currentRecorder = mediaRecorderRef.current;

      if (!currentRecorder || currentRecorder.state === "inactive") {
        console.log("Initializing media recorder...");
        currentRecorder = await initializeMediaRecorder();
        if (!currentRecorder) return;
      }

      setIsRecording(true);

      // Start WebSocket listening
      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {
        console.log("Sending start_listening to WebSocket");
        websocketRef.current.send(
          JSON.stringify({
            type: "start_listening",
            sessionId: sessionId,
          }),
        );
      } else {
        console.log("WebSocket not ready for start_listening");
      }

      if (currentRecorder && currentRecorder.state === "inactive") {
        console.log("Starting recording...");
        // Clear any previous chunks
        audioChunksRef.current = [];
        currentRecorder.start(1000); // Collect data every second
      }
    } else {
      // Stopping recording
      console.log("Stopping recording...");
      setIsRecording(false);

      // Stop WebSocket listening
      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {
        console.log("Sending stop_listening to WebSocket");
        websocketRef.current.send(
          JSON.stringify({
            type: "stop_listening",
            sessionId: sessionId,
          }),
        );
      }

      if (mediaRecorderRef.current && mediaRecorderRef.current.state === "recording") {
        console.log("Stopping media recorder...");
        mediaRecorderRef.current.stop();
      }

      // Stop all tracks to free up the microphone
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
    }
  };

  // Generate audio response using ElevenLabs
  const generateAudioResponse = async (text) => {
    try {
      const baseUrl = window.location.hostname.includes("replit")
        ? `${window.location.protocol}//${window.location.hostname.replace("-80", "-5000").replace("-443", "-5000")}`
        : "http://localhost:5000";

      const response = await fetch(`${baseUrl}/generate-audio`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: text,
          voiceSettings: { gender: selectedVoice },
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.audio) {
          playAudio(data.audio);
        }
      }
    } catch (error) {
      console.error("Failed to generate audio:", error);
    }
  };

  const playAudio = (base64Audio) => {
    try {
      const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);
      audio.play().catch((error) => {
        console.error("Failed to play audio:", error);
      });
    } catch (error) {
      console.error("Audio playback error:", error);
    }
  };

  const practicePhases = [
    { id: "greeting", name: "Opening & Greeting", status: "completed" },
    { id: "needs", name: "Needs Assessment", status: "current" },
    { id: "presentation", name: "Product Presentation", status: "pending" },
    { id: "objections", name: "Handle Objections", status: "pending" },
    { id: "closing", name: "Closing & Follow-up", status: "pending" },
  ];

  const renderConfigureTab = () => (
    <>
      {/* Customer Persona Card */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #3b82f6, #06b6d4)",
            }}
          >
            <User size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Virtual Customer</h2>
            <p style={styles.subtitle}>Choose your challenge</p>
          </div>
        </div>

        {personas.map((persona) => {
          const IconComponent = persona.icon;
          const isSelected = selectedPersona === persona.id;
          return (
            <button
              key={persona.id}
              onClick={() => setSelectedPersona(persona.id)}
              style={{
                ...styles.optionButton,
                ...(isSelected ? styles.selectedButton : {}),
              }}
            >
              <div style={{ ...styles.personaIcon, background: persona.color }}>
                <IconComponent size={28} color="white" />
              </div>
              <div style={styles.personaContent}>
                <div style={styles.personaName}>{persona.name}</div>
                <div style={styles.personaDescription}>
                  {persona.description}
                </div>
                <div style={styles.tags}>
                  <span style={styles.tag}>{persona.age}</span>
                  <span style={styles.tag}>{persona.income}</span>
                </div>
              </div>
              {isSelected && (
                <div
                  style={{
                    width: "24px",
                    height: "24px",
                    background: "#4ade80",
                    borderRadius: "50%",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <div
                    style={{
                      width: "8px",
                      height: "8px",
                      background: "white",
                      borderRadius: "50%",
                    }}
                  ></div>
                </div>
              )}
            </button>
          );
        })}
      </div>

      {/* Product Selection Card */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #10b981, #0d9488)",
            }}
          >
            <Target size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Product Focus</h2>
            <p style={styles.subtitle}>Select what to pitch</p>
          </div>
        </div>

        {products.map((product) => {
          const IconComponent = product.icon;
          const isSelected = selectedProduct === product.id;
          return (
            <button
              key={product.id}
              onClick={() => setSelectedProduct(product.id)}
              style={{
                ...styles.optionButton,
                ...(isSelected ? styles.selectedButton : {}),
                flexDirection: "column",
                alignItems: "flex-start",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "16px",
                  width: "100%",
                  marginBottom: isSelected ? "12px" : 0,
                }}
              >
                <div
                  style={{ ...styles.personaIcon, background: product.color }}
                >
                  <IconComponent size={28} color="white" />
                </div>
                <div style={{ flex: 1, textAlign: "left" }}>
                  <div style={styles.personaName}>{product.name}</div>
                  <div style={styles.personaDescription}>{product.details}</div>
                  <span
                    style={{
                      ...styles.tag,
                      background: isSelected
                        ? "rgba(255, 255, 255, 0.3)"
                        : "rgba(255, 255, 255, 0.2)",
                    }}
                  >
                    {product.category}
                  </span>
                </div>
                {isSelected && (
                  <div
                    style={{
                      width: "24px",
                      height: "24px",
                      background: "#4ade80",
                      borderRadius: "50%",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    <div
                      style={{
                        width: "8px",
                        height: "8px",
                        background: "white",
                        borderRadius: "50%",
                      }}
                    ></div>
                  </div>
                )}
              </div>
              {isSelected && (
                <div style={{ display: "flex", gap: "8px", flexWrap: "wrap" }}>
                  {product.features.map((feature, index) => (
                    <span
                      key={index}
                      style={{
                        ...styles.tag,
                        background: "rgba(255, 255, 255, 0.3)",
                      }}
                    >
                      {feature}
                    </span>
                  ))}
                </div>
              )}
            </button>
          );
        })}
      </div>

      {/* Difficulty Level */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #f97316, #ef4444)",
            }}
          >
            <Zap size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Challenge Level</h2>
            <p style={styles.subtitle}>Adjust difficulty</p>
          </div>
        </div>

        <div style={styles.difficultyGrid}>
          {difficultyLevels.map((level) => (
            <button
              key={level.id}
              onClick={() => setDifficulty(level.id)}
              style={{
                ...styles.difficultyButton,
                ...(difficulty === level.id ? styles.selectedButton : {}),
              }}
            >
              <div
                style={{ ...styles.difficultyDot, background: level.color }}
              ></div>
              <div
                style={{
                  fontSize: "14px",
                  fontWeight: "bold",
                  marginBottom: "4px",
                }}
              >
                {level.name}
              </div>
              <div style={{ fontSize: "12px", color: "#c4b5fd" }}>
                {level.description}
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Voice Settings */}
      <div style={styles.card}>
        <div style={styles.voiceToggle}>
          <div style={styles.cardHeader}>
            <div
              style={{
                ...styles.iconContainer,
                background: "linear-gradient(135deg, #ec4899, #f43f5e)",
              }}
            >
              {isVoiceEnabled ? (
                <Mic size={24} color="white" />
              ) : (
                <MicOff size={24} color="white" />
              )}
            </div>
            <div>
              <h2 style={styles.cardTitle}>Voice Experience</h2>
              <p style={styles.subtitle}>Customize AI personality</p>
            </div>
          </div>
          <div
            onClick={() => setIsVoiceEnabled(!isVoiceEnabled)}
            style={{
              ...styles.toggleSwitch,
              background: isVoiceEnabled ? "#22c55e" : "#6b7280",
            }}
          >
            <div
              style={{
                ...styles.toggleHandle,
                transform: isVoiceEnabled
                  ? "translateX(32px)"
                  : "translateX(0)",
              }}
            ></div>
          </div>
        </div>

        {isVoiceEnabled && (
          <div>
            <h3
              style={{
                color: "white",
                fontSize: "18px",
                fontWeight: "600",
                marginBottom: "12px",
              }}
            >
              Voice Gender
            </h3>
            <div style={styles.voiceGrid}>
              {voiceOptions.gender.map((gender) => (
                <button
                  key={gender.id}
                  onClick={() => {
                    setVoiceGender(gender.id);
                    setSelectedVoice(gender.id);
                  }}
                  style={{
                    ...styles.voiceButton,
                    ...(voiceGender === gender.id ? styles.selectedButton : {}),
                  }}
                >
                  <div style={{ fontSize: "24px", marginBottom: "8px" }}>
                    {gender.icon}
                  </div>
                  <div style={{ fontSize: "14px", fontWeight: "500" }}>
                    {gender.name}
                  </div>
                </button>
              ))}
            </div>

            <h3
              style={{
                color: "white",
                fontSize: "18px",
                fontWeight: "600",
                margin: "24px 0 12px",
              }}
            >
              Personality Tone
            </h3>
            <div style={styles.toneGrid}>
              {voiceOptions.tone.map((tone) => (
                <button
                  key={tone.id}
                  onClick={() => setVoiceTone(tone.id)}
                  style={{
                    ...styles.voiceButton,
                    ...(voiceTone === tone.id ? styles.selectedButton : {}),
                  }}
                >
                  <div style={{ fontSize: "20px", marginBottom: "4px" }}>
                    {tone.emoji}
                  </div>
                  <div style={{ fontSize: "14px", fontWeight: "500" }}>
                    {tone.name}
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Start Button */}
      <button
        style={styles.startButton}
        onClick={handleStartSession}
      >
        <Play size={32} color="white" />
        <span>Start AI Training Session</span>
        <Sparkles size={24} color="white" />
      </button>
    </>
  );

  const renderPracticeTab = () => (
    <>
      {/* Training Progress */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #22c55e, #059669)",
            }}
          >
            <Play size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Training Session</h2>
            <p style={styles.subtitle}>
              {personas.find((p) => p.id === selectedPersona)?.name} •{" "}
              {products.find((p) => p.id === selectedProduct)?.name}
            </p>
          </div>
        </div>

        <div style={{ marginBottom: "24px" }}>
          {practicePhases.map((phase, index) => (
            <div
              key={phase.id}
              style={{
                display: "flex",
                alignItems: "center",
                gap: "16px",
                padding: "16px",
                marginBottom: "12px",
                borderRadius: "12px",
                background:
                  phase.status === "current"
                    ? "rgba(34, 197, 94, 0.2)"
                    : phase.status === "completed"
                      ? "rgba(255, 255, 255, 0.1)"
                      : "rgba(255, 255, 255, 0.05)",
                border:
                  phase.status === "current"
                    ? "2px solid #22c55e"
                    : "1px solid rgba(255, 255, 255, 0.1)",
              }}
            >
              <div
                style={{
                  width: "32px",
                  height: "32px",
                  borderRadius: "50%",
                  background:
                    phase.status === "completed"
                      ? "#22c55e"
                      : phase.status === "current"
                        ? "#3b82f6"
                        : "#6b7280",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  color: "white",
                  fontSize: "14px",
                  fontWeight: "bold",
                }}
              >
                {phase.status === "completed" ? "✓" : index + 1}
              </div>
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    color: "white",
                    fontWeight: "600",
                    fontSize: "16px",
                    marginBottom: "4px",
                  }}
                >
                  {phase.name}
                </div>
                <div
                  style={{
                    color: phase.status === "current" ? "#4ade80" : "#9ca3af",
                    fontSize: "14px",
                    textTransform: "capitalize",
                  }}
                >
                  {phase.status === "current" ? "In Progress" : phase.status}
                </div>
                              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI Conversation */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
            }}
          >
            <Brain size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>AI Customer Interaction</h2>
            <p style={styles.subtitle}>Practice your pitch in real-time</p>
          </div>
        </div>

        <div
          style={{
            background: "rgba(0, 0, 0, 0.3)",
            borderRadius: "16px",
            padding: "20px",
            marginBottom: "20px",
            minHeight: "200px",
          }}
        >
          <div
            style={{
              display: "flex",
              alignItems: "center",
              gap: "12px",
              marginBottom: "16px",
            }}
          >
            <div
              style={{
                width: "40px",
                height: "40px",
                background: personas.find((p) => p.id === selectedPersona)
                  ?.color,
                borderRadius: "50%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <User size={20} color="white" />
            </div>
            <div>
              <div style={{ color: "white", fontWeight: "600" }}>
                {personas.find((p) => p.id === selectedPersona)?.name}
              </div>
              <div style={{ color: "#9ca3af", fontSize: "14px" }}>
                Virtual Customer
              </div>
            </div>
          </div>

          <div
            style={{
              maxHeight: "300px",
              overflowY: "auto",
              display: "flex",
              flexDirection: "column",
              gap: "12px",
            }}
          >
            {conversation.length === 0 ? (
              <div
                style={{
                  background: "rgba(255, 255, 255, 0.1)",
                  padding: "16px",
                  borderRadius: "12px",
                  color: "white",
                  fontSize: "16px",
                  lineHeight: "1.5",
                }}
              >
                {aiResponse}
              </div>
            ) : (
              conversation.map((msg, index) => (
                <div
                  key={index}
                  style={{
                    background:
                      msg.role === "user"
                        ? "rgba(59, 130, 246, 0.2)"
                        : "rgba(255, 255, 255, 0.1)",
                    padding: "16px",
                    borderRadius: "12px",
                    color: "white",
                    fontSize: "16px",
                    lineHeight: "1.5",
                    alignSelf: msg.role === "user" ? "flex-end" : "flex-start",
                    maxWidth: "80%",
                  }}
                >
                  <div
                    style={{
                      fontSize: "12px",
                      color: "#9ca3af",
                      marginBottom: "4px",
                    }}
                  >
                    {msg.role === "user" ? "You" : "AI Customer"}
                  </div>
                  {msg.content}
                </div>
              ))
            )}
          </div>
        </div>

        <div
          style={{
            display: "flex",
            gap: "12px",
            alignItems: "center",
          }}
        >
          <button
            onClick={() => {
              setIsSessionActive(false);
              setActiveTab("configure");

              if (websocketRef.current) {
                websocketRef.current.close();
              }
            }}
            style={{
              flex: 1,
              padding: "16px",
              background: "linear-gradient(135deg, #ef4444, #dc2626)",
              color: "white",
              border: "none",
              borderRadius: "12px",
              fontWeight: "600",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: "8px",
            }}
          >
            <MicOff size={20} />
            End Session
          </button>
          <button
            onClick={handleRecord}
            disabled={!isSessionActive}
            style={{
              flex: 2,
              padding: "16px",
              background: isRecording
                ? "linear-gradient(135deg, #ef4444, #dc2626)"
                : "linear-gradient(135deg, #22c55e, #059669)",
              color: "white",
              border: "none",
              borderRadius: "12px",
              fontWeight: "600",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: "8px",
              opacity: !isSessionActive ? 0.5 : 1,
            }}
          >
            <Mic size={20} />
            {isRecording ? "Stop Recording" : "Start Recording"}
          </button>
        </div>
      </div>

      {/* Quick Tips */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #eab308, #ca8a04)",
            }}
          >
            <Sparkles size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>AI Coaching Tips</h2>
            <p style={styles.subtitle}>Real-time guidance</p>
          </div>
        </div>

        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "12px",
          }}
        >
          {[
            "Acknowledge their time concern first",
            "Ask about their current financial goals",
            "Focus on value, not features",
            "Use their name if provided",
          ].map((tip, index) => (
            <div
              key={index}
              style={{
                padding: "12px 16px",
                background: "rgba(234, 179, 8, 0.2)",
                borderRadius: "12px",
                color: "#fbbf24",
                fontSize: "14px",
                display: "flex",
                alignItems: "center",
                gap: "8px",
              }}
            >
              <div
                style={{
                  width: "6px",
                  height: "6px",
                  background: "#fbbf24",
                  borderRadius: "50%",
                }}
              ></div>
              {tip}
            </div>
          ))}
        </div>
      </div>
    </>
  );

  const renderAnalyticsTab = () => (
    <>
      {/* Performance Overview */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #06b6d4, #0891b2)",
            }}
          >
            <BarChart3 size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Performance Dashboard</h2>
            <p style={styles.subtitle}>Your comprehensive training analytics</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "16px",
            marginBottom: "24px",
          }}
        >
          <div
            style={{
              background: "rgba(34, 197, 94, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#22c55e",
                marginBottom: "8px",
              }}
            >
              {realAnalytics.totalSessions}
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Total Sessions
            </div>
          </div>
          <div
            style={{
              background: "rgba(59, 130, 246, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#3b82f6",
                marginBottom: "8px",
              }}
            >
              {analyticsData.averageScore}%
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Average Score
            </div>
          </div>
          <div
            style={{
              background: "rgba(139, 92, 246, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#8b5cf6",
                marginBottom: "8px",
              }}
            >
              {analyticsData.totalHours}h
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Training Hours
            </div>
          </div>
          <div
            style={{
              background: "rgba(244, 63, 94, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#f43f5e",
                marginBottom: "8px",
              }}
            >
              {analyticsData.streak}
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>Day Streak</div>
          </div>
        </div>

        {/* Progress Chart */}
        <div
          style={{
            background: "rgba(255, 255, 255, 0.05)",
            borderRadius: "16px",
            padding: "20px",
            marginBottom: "20px",
          }}
        >
          <h3
            style={{
              color: "white",
              fontSize: "16px",
              fontWeight: "600",
              marginBottom: "16px",
            }}
          >
            Monthly Progress Trend
          </h3>
          <div
            style={{
              display: "flex",
              alignItems: "end",
              gap: "12px",
              height: "120px",
            }}
          >
            {analyticsData.monthlyProgress.map((month, index) => (
              <div
                key={index}
                style={{
                  flex: 1,
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                }}
              >
                <div
                  style={{
                    width: "100%",
                    background: `linear-gradient(to top, #3b82f6, #8b5cf6)`,
                    borderRadius: "8px 8px 4px 4px",
                    height: `${month.score}%`,
                    minHeight: "20px",
                    marginBottom: "8px",
                    position: "relative",
                  }}
                >
                  <div
                    style={{
                      position: "absolute",
                      top: "-25px",
                      left: "50%",
                      transform: "translateX(-50%)",
                      color: "white",
                      fontSize: "12px",
                      fontWeight: "600",
                    }}
                  >
                    {month.score}%
                  </div>
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "12px",
                    fontWeight: "500",
                  }}
                >
                  {month.month}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Skill Analysis with Trends */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #f97316, #ea580c)",
            }}
          >
            <Target size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Skill Analysis</h2>
            <p style={styles.subtitle}>Detailed performance breakdown</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
          {realAnalytics.skillBreakdown.map((skill, index) => (
            <div
              key={index}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "20px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "16px",
              }}
            >
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                    marginBottom: "8px",
                  }}
                >
                  <div
                    style={{
                      color: "white",
                      fontWeight: "600",
                      fontSize: "16px",
                    }}
                  >
                    {skill.skill}
                  </div>
                  <div
                    style={{
                      padding: "2px 8px",
                      borderRadius: "12px",
                      background:
                        skill.trend === "up"
                          ? "rgba(34, 197, 94, 0.2)"
                          : "rgba(239, 68, 68, 0.2)",
                      color: skill.trend === "up" ? "#22c55e" : "#ef4444",
                      fontSize: "12px",
                      fontWeight: "600",
                    }}
                  >
                    {skill.improvement}
                  </div>
                </div>
                <div
                  style={{
                    width: "100%",
                    height: "12px",
                    background: "rgba(255, 255, 255, 0.1)",
                    borderRadius: "6px",
                    overflow: "hidden",
                    position: "relative",
                  }}
                >
                  <div
                    style={{
                      width: `${skill.lastWeek}%`,
                      height: "100%",
                      background: "rgba(255, 255, 255, 0.3)",
                      position: "absolute",
                    }}
                  ></div>
                  <div
                    style={{
                      width: `${skill.score}%`,
                      height: "100%",
                      background:
                        skill.score >= 80
                          ? "linear-gradient(90deg, #22c55e, #059669)"
                          : skill.score >= 60
                            ? "linear-gradient(90deg, #eab308, #ca8a04)"
                            : "linear-gradient(90deg, #ef4444, #dc2626)",
                      transition: "width 0.5s ease",
                    }}
                  ></div>
                </div>
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    marginTop: "4px",
                    fontSize: "12px",
                    color: "#9ca3af",
                  }}
                >
                  <span>Last week: {skill.lastWeek}%</span>
                  <span>Current: {skill.score}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Persona Performance */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #ec4899, #db2777)",
            }}
          >
            <User size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Customer Persona Analysis</h2>
            <p style={styles.subtitle}>Performance by customer type</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "16px",
          }}
        >
          {analyticsData.personaPerformance.map((persona, index) => (
            <div
              key={index}
              style={{
                padding: "16px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
              }}
            >
              <div
                style={{
                  color: "white",
                  fontWeight: "600",
                  marginBottom: "8px",
                  fontSize: "14px",
                }}
              >
                {persona.persona}
              </div>
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  marginBottom: "8px",
                }}
              >
                <span style={{ color: "#9ca3af", fontSize: "12px" }}>
                  {persona.sessions} sessions
                </span>
                <span
                  style={{
                    color:
                      persona.avgScore >= 80
                        ? "#22c55e"
                        : persona.avgScore >= 60
                          ? "#eab308"
                          : "#ef4444",
                    fontWeight: "bold",
                    fontSize: "14px",
                  }}
                >
                  {persona.avgScore}%
                </span>
              </div>
              <div
                style={{
                  width: "100%",
                  height: "4px",
                  background: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "2px",
                  overflow: "hidden",
                }}
              >
                <div
                  style={{
                    width: `${persona.winRate}%`,
                    height: "100%",
                    background: "linear-gradient(90deg, #3b82f6, #8b5cf6)",
                  }}
                ></div>
              </div>
              <div
                style={{
                  color: "#9ca3af",
                  fontSize: "12px",
                  marginTop: "4px",
                }}
              >
                {persona.winRate}% success rate
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Product Performance */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #10b981, #059669)",
            }}
          >
            <CreditCard size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Product Performance</h2>
            <p style={styles.subtitle}>Success rates by product type</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
          {analyticsData.productPerformance.map((product, index) => (
            <div
              key={index}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "16px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
              }}
            >
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    color: "white",
                    fontWeight: "600",
                    marginBottom: "4px",
                  }}
                >
                  {product.product}
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "14px",
                    marginBottom: "8px",
                  }}
                >
                  {product.sessions} sessions • Avg score: {product.avgScore}%
                </div>
                <div
                  style={{
                    width: "100%",
                    height: "6px",
                    background: "rgba(255, 255, 255, 0.1)",
                    borderRadius: "3px",
                    overflow: "hidden",
                  }}
                >
                  <div
                    style={{
                      width: `${product.conversionRate}%`,
                      height: "100%",
                      background: "linear-gradient(90deg, #22c55e, #059669)",
                    }}
                  ></div>
                </div>
              </div>
              <div style={{ marginLeft: "16px", textAlign: "right" }}>
                <div
                  style={{
                    color: "#22c55e",
                    fontWeight: "bold",
                    fontSize: "16px",
                  }}
                >
                  {product.conversionRate}%
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "12px",
                  }}
                >
                  conversion
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Recent Sessions with Enhanced Details */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
            }}
          >
            <BarChart3 size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Recent Session Details</h2>
            <p style={styles.subtitle}>Comprehensive session breakdown</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
          {analyticsData.recentSessions.map((session, index) => (
            <div
              key={index}
              style={{
                padding: "20px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "16px",
                border:
                  index === 0
                    ? "2px solid rgba(34, 197, 94, 0.3)"
                    : "1px solid rgba(255, 255, 255, 0.1)",
              }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  marginBottom: "12px",
                }}
              >
                <div>
                  <div
                    style={{
                      color: "white",
                      fontWeight: "600",
                      fontSize: "16px",
                      marginBottom: "4px",
                    }}
                  >
                    {session.product}
                  </div>
                  <div
                    style={{
                      color: "#9ca3af",
                      fontSize: "14px",
                    }}
                  >
                    {session.persona} • {session.date}
                  </div>
                </div>
                <div
                  style={{
                    padding: "8px 16px",
                    borderRadius: "20px",
                    background:
                      session.score >= 80
                        ? "rgba(34, 197, 94, 0.2)"
                        : session.score >= 60
                          ? "rgba(234, 179, 8, 0.2)"
                          : "rgba(239, 68, 68, 0.2)",
                    color:
                      session.score >= 80
                        ? "#22c55e"
                        : session.score >= 60
                          ? "#eab308"
                          : "#ef4444",
                    fontWeight: "bold",
                  }}
                >
                  {session.score}%
                </div>
              </div>

              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(3, 1fr)",
                  gap: "12px",
                }}
              >
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color: "#3b82f6",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.duration}
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Duration
                  </div>
                </div>
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color: "#f97316",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.objections}
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Objections
                  </div>
                </div>
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color:
                        session.closingRate >= 70
                          ? "#22c55e"
                          : session.closingRate >= 50
                            ? "#eab308"
                            : "#ef4444",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.closingRate}%
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Closing Rate
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Achievements */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #eab308, #ca8a04)",
            }}
          >
            <Sparkles size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Achievements</h2>
            <p style={styles.subtitle}>Your training milestones</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "12px",
          }}
        >
          {analyticsData.achievements.map((achievement, index) => (
            <div
              key={index}
              style={{
                padding: "16px",
                background: achievement.unlocked
                  ? "rgba(234, 179, 8, 0.2)"
                  : "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
                border: achievement.unlocked
                  ? "1px solid rgba(234, 179, 8, 0.3)"
                  : "1px solid rgba(255, 255, 255, 0.1)",
                opacity: achievement.unlocked ? 1 : 0.6,
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  marginBottom: "8px",
                }}
              >
                <div
                  style={{
                    width: "24px",
                    height: "24px",
                    borderRadius: "50%",
                    background: achievement.unlocked ? "#eab308" : "#6b7280",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontSize: "12px",
                  }}
                >
                  {achievement.unlocked ? "🏆" : "🔒"}
                </div>
                <div
                  style={{
                    color: achievement.unlocked ? "#fbbf24" : "#9ca3af",
                    fontWeight: "600",
                    fontSize: "14px",
                  }}
                >
                  {achievement.title}
                </div>
              </div>
              <div
                style={{
                  color: "#9ca3af",
                  fontSize: "12px",
                }}
              >
                {achievement.description}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );

  const styles = {
    container: {
      minHeight: "100vh",
      background:
        "linear-gradient(135deg, #0f172a 0%, #581c87 50%, #0f172a 100%)",
      position: "relative",
      overflow: "hidden",
      fontFamily: "system-ui, -apple-system, sans-serif",
    },
    backgroundBlob1: {
      position: "absolute",
      top: "-160px",
      right: "-160px",
      width: "320px",
      height: "320px",
      background: "#8b5cf6",
      borderRadius: "50%",
      filter: "blur(60px)",
      opacity: 0.2,
      animation: "pulse 3s infinite",
    },
    backgroundBlob2: {
      position: "absolute",
      bottom: "-160px",
      left: "-160px",
      width: "320px",
      height: "320px",
      background: "#3b82f6",
      borderRadius: "50%",
      filter: "blur(60px)",
      opacity: 0.2,
      animation: "pulse 3s infinite 2s",
    },
    header: {
      position: "relative",
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderBottom: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "24px",
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
    },
    headerTitle: {
      display: "flex",
      alignItems: "center",
      gap: "12px",
    },
    iconContainer: {
      width: "48px",
      height: "48px",
      background: "linear-gradient(135deg, #3b82f6, #8b5cf6)",
      borderRadius: "16px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "0 10px 25px rgba(0, 0, 0, 0.3)",
    },
    title: {
      fontSize: "24px",
      fontWeight: "bold",
      color: "white",
      margin: 0,
    },
    subtitle: {
      fontSize: "14px",
      color: "#c4b5fd",
      margin: 0,
    },
    statusIndicator: {
      display: "flex",
      alignItems: "center",
      gap: "8px",
    },
    statusDot: {
      width: "12px",
      height: "12px",
      background: "#4ade80",
      borderRadius: "50%",
      animation: "pulse 2s infinite",
    },
    content: {
      position: "relative",
      padding: "24px",
      paddingBottom: "120px",
      display: "flex",
      flexDirection: "column",
      gap: "24px",
    },
    card: {
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderRadius: "24px",
      border: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "24px",
      boxShadow: "0 25px 50px rgba(0, 0, 0, 0.3)",
    },
    cardHeader: {
      display: "flex",
      alignItems: "center",
      gap: "12px",
      marginBottom: "24px",
    },
    cardTitle: {
      fontSize: "20px",
      fontWeight: "bold",
      color: "white",
      margin: 0,
    },
    optionButton: {
      width: "100%",
      padding: "20px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      marginBottom: "16px",
      display: "flex",
      alignItems: "center",
      gap: "16px",
      textAlign: "left",
    },
    selectedButton: {
      border: "2px solid rgba(255, 255, 255, 0.4)",
      background: "rgba(255, 255, 255, 0.2)",
      boxShadow: "0 20px 40px rgba(0, 0, 0, 0.3)",
      transform: "scale(1.02)",
    },
    personaIcon: {
      width: "56px",
      height: "56px",
      borderRadius: "16px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "0 10px 25px rgba(0, 0, 0, 0.3)",
    },
    personaContent: {
      flex: 1,
    },
    personaName: {
      fontSize: "18px",
      fontWeight: "bold",
      marginBottom: "4px",
    },
    personaDescription: {
      fontSize: "14px",
      color: "#c4b5fd",
      marginBottom: "8px",
    },
    tags: {
      display: "flex",
      gap: "8px",
    },
    tag: {
      background: "rgba(255, 255, 255, 0.2)",
      padding: "4px 8px",
      borderRadius: "12px",
      fontSize: "12px",
      color: "#e9d5ff",
    },
    difficultyGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)",
      gap: "12px",
    },
    difficultyButton: {
      padding: "16px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      textAlign: "center",
    },
    difficultyDot: {
      width: "32px",
      height: "32px",
      borderRadius: "50%",
      margin: "0 auto 8px",
    },
    voiceToggle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      marginBottom: "24px",
    },
    toggleSwitch: {
      position: "relative",
      width: "64px",
      height: "32px",
      borderRadius: "20px",
      cursor: "pointer",
      transition: "background-color 0.3s ease",
    },
    toggleHandle: {
      position: "absolute",
      width: "24px",
      height: "24px",
      background: "white",
      borderRadius: "50%",
      top: "4px",
      transition: "transform 0.3s ease",
    },
    voiceGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)",
      gap: "12px",
      marginBottom: "24px",
    },
    toneGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(2, 1fr)",
      gap: "12px",
    },
    voiceButton: {
      padding: "16px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      textAlign: "center",
    },
    startButton: {
      width: "100%",
      background: "linear-gradient(135deg, #2563eb, #8b5cf6, #06b6d4)",
      color: "white",
      padding: "24px",
      borderRadius: "24px",
      border: "none",
      fontSize: "20px",
      fontWeight: "bold",
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      gap: "16px",
      boxShadow: "0 25px 50px rgba(139, 92, 246, 0.3)",
      transition: "all 0.3s ease",
      position: "relative",
      overflow: "hidden",
    },
    bottomNav: {
      position: "fixed",
      bottom: 0,
      left: 0,
      right: 0,
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderTop: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "16px 24px",
      display: "flex",
      justifyContent: "space-around",
    },
    navButton: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      gap: "8px",
      padding: "12px",
      borderRadius: "16px",
      background: "rgba(255, 255, 255, 0.2)",
      color: "#60a5fa",
      border: "none",
      cursor: "pointer",
      fontSize: "12px",
      fontWeight: "600",
    },
  };

  return (
    <div style={styles.container}>
      <style>
        {`
          @keyframes pulse {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 0.4; }
          }

          button:hover {
            transform: translateY(-2px);
          }
        `}
      </style>

      {/* Animated Background */}
      <div style={styles.backgroundBlob1}></div>
      <div style={styles.backgroundBlob2}></div>

      {/* Header */}
      <div style={styles.header}>
        <div style={styles.headerTitle}>
          <div style={styles.iconContainer}>
            <Brain size={24} color="white" />
          </div>
          <div>
            <h1 style={styles.title}>AI Sales Trainer</h1>
            <p style={styles.subtitle}>
              Master your pitch with virtual customers
            </p>
          </div>
        </div>
        <div style={styles.statusIndicator}>
          <div style={styles.statusDot}></div>
          <span
            style={{ color: "#4ade80", fontSize: "14px", fontWeight: "500" }}
          >
            AI Ready
          </span>
        </div>
      </div>

      <div style={styles.content}>
        {activeTab === "configure" && renderConfigureTab()}
        {activeTab === "practice" && renderPracticeTab()}
        {activeTab === "analytics" && renderAnalyticsTab()}
      </div>

      {/* Bottom Navigation */}
      <div style={styles.bottomNav}>
        <button
          onClick={() => setActiveTab("configure")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "configure"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "configure"
                ? "#60a5fa"
                : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <Settings size={24} />
          <span>Configure</span>
        </button>
        <button
          onClick={() => setActiveTab("practice")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "practice"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "practice" ? "#60a5fa" : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <Play size={24} />
          <span>Practice</span>
        </button>
        <button
          onClick={() => setActiveTab("analytics")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "analytics"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "analytics"
                ? "#60a5fa"
                : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <BarChart3 size={24} />
          <span>Analytics</span>
        </button>
      </div>
    </div>
  );
};

export default FintechTrainingApp;
-----------------------------------eleven labs----------------------
from fastapi import FastAPI, File, UploadFile, HTTPException, Form, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
import tempfile
import os
import sys
from io import BytesIO
import numpy as np
import scipy.io.wavfile as wavfile
from dotenv import load_dotenv
from groq import Groq
from elevenlabs.client import ElevenLabs
from elevenlabs import Voice, VoiceSettings
import json
from pydantic import BaseModel
from typing import Optional, Dict, List, Any
import uvicorn
import uuid
from datetime import datetime, timedelta
import asyncio
from collections import defaultdict
import base64

# Load environment variables
load_dotenv()

# Initialize Groq and ElevenLabs clients
client = Groq(api_key=os.getenv("GROQ_API_KEY"))
elevenlabs_client = ElevenLabs(api_key=os.getenv("ELEVENLABS_API_KEY"))

app = FastAPI(title="Fintech Training AI Customer Interaction API", version="1.0.0")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Personas configuration
PERSONAS = {
    "young-professional": {
        "name": "Young Professional",
        "traits": "Tech-savvy, ambitious, values efficiency",
        "behavior": "Direct questions about features, mobile app functionality, and rewards",
        "objections": ["Time constraints", "Already has solutions", "Prefers digital-first approaches"]
    },
    "retiree": {
        "name": "Retiree",
        "traits": "Conservative, values security and stability",
        "behavior": "Concerned about fees, security, and wants detailed explanations",
        "objections": ["Trust issues", "Complexity concerns", "Fixed income constraints"]
    },
    "family-oriented": {
        "name": "Family Person",
        "traits": "Protective, focused on family financial security",
        "behavior": "Asks about family coverage, educational benefits, and cost savings",
        "objections": ["Budget limitations", "Family priorities", "Existing commitments"]
    },
    "skeptical-veteran": {
        "name": "Skeptical Veteran",
        "traits": "Experienced, hard to convince, asks tough questions",
        "behavior": "Challenges claims, asks for proof, compares with competitors",
        "objections": ["Seen it all before", "Prove the value", "Why switch from current provider"]
    }
}

# Products configuration
PRODUCTS = {
    "credit-card": {
        "name": "Platinum Credit Card",
        "features": ["No annual fee", "2% cashback", "Travel insurance", "24/7 support"],
        "target_audience": "All personas",
        "key_benefits": "Reward earning and financial flexibility"
    },
    "health-insurance": {
        "name": "Comprehensive Health Plan",
        "features": ["Full coverage", "Preventive care", "Specialist access", "Prescription coverage"],
        "target_audience": "Family person, retiree",
        "key_benefits": "Health security and cost savings"
    },
    "life-insurance": {
        "name": "Life Protection Plus",
        "features": ["Term and whole life options", "Living benefits", "Cash value", "Flexible premiums"],
        "target_audience": "Family person, young professional",
        "key_benefits": "Financial protection for loved ones"
    },
    "home-loan": {
        "name": "Smart Home Loan",
        "features": ["Low interest rates", "Flexible terms", "Digital application", "Fast approval"],
        "target_audience": "Young professional, family person",
        "key_benefits": "Homeownership made accessible"
    }
}

# Conversation phases
CONVERSATION_PHASES = [
    "greeting",
    "needs_assessment",
    "product_presentation",
    "handle_objections",
    "closing"
]

# Difficulty levels
DIFFICULTY_LEVELS = {
    "beginner": {
        "objection_frequency": 0.3,
        "objection_complexity": "simple",
        "resistance_level": "low"
    },
    "intermediate": {
        "objection_frequency": 0.5,
        "objection_complexity": "moderate",
        "resistance_level": "medium"
    },
    "advanced": {
        "objection_frequency": 0.7,
        "objection_complexity": "complex",
        "resistance_level": "high"
    }
}

# Voice settings
VOICE_SETTINGS = {
    "male": {"voice_id": "TxGEqnHWrfWFTfGW9XjX", "name": "Josh"},
    "female": {"voice_id": "21m00Tcm4TlvDq8ikWAM", "name": "Rachel"}
}

# Language settings
LANGUAGE_CODES = {
    "en": "English",
    "hi": "Hindi",
    "bn": "Bengali",
    "te": "Telugu",
    "mr": "Marathi",
    "ta": "Tamil",
    "ur": "Urdu",
    "gu": "Gujarati",
    "kn": "Kannada",
    "or": "Odia",
    "pa": "Punjabi"
}

# Global storage (in production, use proper database)
sessions = {}
analytics_data = {
    "total_sessions": 0,
    "average_score": 0,
    "improvement_rate": 0,
    "completion_rate": 0,
    "persona_performance": defaultdict(list),
    "product_performance": defaultdict(list),
    "recent_sessions": [],
    "achievements": []
}

# WebSocket connections
active_connections: Dict[str, WebSocket] = {}

# Pydantic models
class SessionConfig(BaseModel):
    persona: str
    product: str
    difficulty: str
    voiceSettings: dict = {"gender": "female", "language": "en"}
    voice_tone: str = "neutral"
    user_name: str = "Agent"

class ChatMessage(BaseModel):
    text: str
    speaker: str  # "user" or "ai"
    timestamp: datetime
    phase: str

class SessionData(BaseModel):
    session_id: str
    config: SessionConfig
    conversation: List[ChatMessage]
    current_phase: str
    start_time: datetime
    end_time: Optional[datetime]
    score: Optional[int]
    is_active: bool

class CoachingTip(BaseModel):
    phase: str
    tip: str
    priority: str

# Helper functions
def generate_session_id():
    return str(uuid.uuid4())

def get_coaching_tips(phase: str, persona: str) -> List[CoachingTip]:
    tips = {
        "greeting": [
            CoachingTip(phase="greeting", tip="Start with a warm, professional greeting", priority="high"),
            CoachingTip(phase="greeting", tip="Introduce yourself and your company clearly", priority="high"),
            CoachingTip(phase="greeting", tip="Ask permission to discuss financial solutions", priority="medium")
        ],
        "needs_assessment": [
            CoachingTip(phase="needs_assessment", tip="Ask open-ended questions about their current situation", priority="high"),
            CoachingTip(phase="needs_assessment", tip="Listen actively and take notes", priority="high"),
            CoachingTip(phase="needs_assessment", tip="Identify pain points and opportunities", priority="medium")
        ],
        "product_presentation": [
            CoachingTip(phase="product_presentation", tip="Focus on benefits that match their needs", priority="high"),
            CoachingTip(phase="product_presentation", tip="Use specific examples and scenarios", priority="medium"),
            CoachingTip(phase="product_presentation", tip="Avoid overwhelming with too many features", priority="medium")
        ],
        "handle_objections": [
            CoachingTip(phase="handle_objections", tip="Acknowledge their concerns first", priority="high"),
            CoachingTip(phase="handle_objections", tip="Ask clarifying questions to understand the objection", priority="high"),
            CoachingTip(phase="handle_objections", tip="Provide evidence-based responses", priority="medium")
        ],
        "closing": [
            CoachingTip(phase="closing", tip="Summarize the key benefits discussed", priority="high"),
            CoachingTip(phase="closing", tip="Ask for the commitment clearly", priority="high"),
            CoachingTip(phase="closing", tip="Handle final concerns and set next steps", priority="medium")
        ]
    }
    return tips.get(phase, [])

def generate_ai_prompt(config, phase: str, conversation_history: List[ChatMessage]) -> str:
    # Handle both dict and SessionConfig object
    if isinstance(config, dict):
        persona_key = config["persona"]
        product_key = config["product"]
        difficulty_key = config["difficulty"]
    else:
        persona_key = config.persona
        product_key = config.product
        difficulty_key = config.difficulty

    # Map difficulty values to DIFFICULTY_LEVELS keys
    difficulty_mapping = {
        "easy": "beginner",
        "medium": "intermediate",
        "hard": "advanced",
        "beginner": "beginner",
        "intermediate": "intermediate",
        "advanced": "advanced"
    }

    mapped_difficulty = difficulty_mapping.get(difficulty_key, "intermediate")

    persona = PERSONAS[persona_key]
    product = PRODUCTS[product_key]
    difficulty = DIFFICULTY_LEVELS[mapped_difficulty]

    base_prompt = f"""You are roleplaying as a {persona['name']} customer in a financial services training simulation.

PERSONA TRAITS: {persona['traits']}
BEHAVIOR: {persona['behavior']}
TYPICAL OBJECTIONS: {', '.join(persona['objections'])}

PRODUCT BEING DISCUSSED: {product['name']}
PRODUCT FEATURES: {', '.join(product['features'])}

DIFFICULTY LEVEL: {mapped_difficulty.title()}
- Objection frequency: {difficulty['objection_frequency']*100}%
- Resistance level: {difficulty['resistance_level']}

CURRENT PHASE: {phase.replace('_', ' ').title()}

CONVERSATION RULES:
1. Stay in character as the {persona['name']}
2. Be realistic - not every call should end in a sale
3. Raise objections naturally based on your persona
4. Show interest when benefits align with your needs
5. Ask questions that your persona would ask
6. Keep responses conversational and realistic (2-3 sentences max)
7. Don't make it too easy - challenge the agent appropriately

Remember: You are the CUSTOMER, not the salesperson. React naturally to what the agent says."""

    if conversation_history:
        # Access 'speaker' and 'text' as dictionary keys, not attributes
        recent_context = "\n".join([f"{msg['speaker']}: {msg['text']}" for msg in conversation_history[-3:]])
        base_prompt += f"\n\nRECENT CONVERSATION:\n{recent_context}"
    return base_prompt

async def transcribe_audio(audio_data: bytes) -> tuple[str, str]:
    """Transcribe audio using Groq Whisper"""
    try:
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            temp_file.write(audio_data)
            temp_file_path = temp_file.name

        with open(temp_file_path, 'rb') as audio_file:
            transcription = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-large-v3-turbo",
                response_format="verbose_json"
            )

        os.unlink(temp_file_path)

        text = transcription.text.strip()
        language = getattr(transcription, 'language', 'en')

        return text, language

    except Exception as e:
        print(f"Transcription error: {e}")
        return "", "en"

async def generate_ai_response(session_id: str, user_input: str) -> str:
    """Generate AI customer response using Groq"""
    session = sessions.get(session_id)
    if not session:
        return "I'm sorry, I think we got disconnected."

    try:
        prompt = generate_ai_prompt(session['config'], session['current_phase'], session['conversation'])

        messages = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_input}
        ]

        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=messages,
            max_tokens=150,
            temperature=0.8
        )

        return response.choices[0].message.content

    except Exception as e:
        print(f"AI response error: {e}")
        return "I'm having trouble hearing you clearly. Could you repeat that?"

async def text_to_speech(text: str, voice_gender: str = "female", language: str = "en") -> bytes:
    """Convert text to speech using ElevenLabs"""
    try:
        actual_voice_gender = voice_gender if voice_gender in VOICE_SETTINGS else "female"
        voice_config = VOICE_SETTINGS[actual_voice_gender]

        audio_stream = elevenlabs_client.generate(
            text=text,
            voice=Voice(
                voice_id=voice_config["voice_id"],
                settings=VoiceSettings(
                    stability=0.32,
                    similarity_boost=0.46,
                    style=0.85
                )
            ),
            model="eleven_multilingual_v2",
            stream=True
        )

        audio_buffer = BytesIO()
        for chunk in audio_stream:
            if chunk:
                audio_buffer.write(chunk)

        return audio_buffer.getvalue()

    except Exception as e:
        print(f"TTS error: {e}")
        return b""

def update_analytics(session: Dict[str, Any]):
    """Update analytics after session completion"""
    global analytics_data

    analytics_data["total_sessions"] += 1

    if session.get("score"):
        # Update average score
        current_avg = analytics_data["average_score"]
        total_sessions = analytics_data["total_sessions"]
        analytics_data["average_score"] = ((current_avg * (total_sessions - 1)) + session["score"]) / total_sessions

    # Update persona and product performance
    config = session["config"]
    analytics_data["persona_performance"][config["persona"]].append(session.get("score", 0))
    analytics_data["product_performance"][config["product"]].append(session.get("score", 0))

    # Add to recent sessions
    analytics_data["recent_sessions"].insert(0, {
        "session_id": session["session_id"],
        "persona": config["persona"],
        "product": config["product"],
        "score": session.get("score", 0),
        "date": session["start_time"].isoformat()
    })

    # Keep only last 10 sessions
    analytics_data["recent_sessions"] = analytics_data["recent_sessions"][:10]

# API Endpoints
@app.get("/")
async def root():
    return {
        "message": "Fintech Training AI Customer Interaction API",
        "version": "1.0.0",
        "endpoints": {
            "session": "/session",
            "websocket": "/ws/{session_id}",
            "analytics": "/analytics"
        }
    }

@app.post("/session")
async def start_session(config: SessionConfig):
    """Start a new training session"""
    session_id = generate_session_id()

    # Generate initial AI response
    persona = PERSONAS[config.persona]
    product = PRODUCTS[config.product]

    initial_prompt = f"""Generate an opening statement as a {persona['name']} customer who just answered a sales call about {product['name']}.
    Be realistic to the persona - show the appropriate level of interest/skepticism. Keep it to 1-2 sentences."""

    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": initial_prompt}],
            max_tokens=100,
            temperature=0.8
        )
        initial_response = response.choices[0].message.content
    except:
        initial_response = "Hello, I got your call about some financial products. What exactly are you offering?"

    session_data = {
        "session_id": session_id,
        "config": config.model_dump(),
        "conversation": [],
        "current_phase": "greeting",
        "start_time": datetime.now(),
        "end_time": None,
        "score": None,
        "is_active": True
    }

    sessions[session_id] = session_data

    return {
        "success": True,
        "sessionId": session_id,
        "initialResponse": initial_response,
        "coaching_tips": [tip.model_dump() for tip in get_coaching_tips("greeting", config.persona)]
    }

@app.post("/session/{session_id}/end")
async def end_session(session_id: str, score: Optional[int] = None):
    """End a training session"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    session = sessions[session_id]
    session["end_time"] = datetime.now()
    session["is_active"] = False
    session["score"] = score

    update_analytics(session)

    return {
        "success": True,
        "session_duration": (session["end_time"] - session["start_time"]).total_seconds(),
        "final_score": score
    }

@app.get("/session/{session_id}")
async def get_session(session_id: str):
    """Get session details"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    return sessions[session_id]

@app.delete("/session/{session_id}")
async def clear_session(session_id: str):
    """Clear session history"""
    if session_id in sessions:
        del sessions[session_id]
        if session_id in active_connections:
            del active_connections[session_id]

    return {"success": True, "message": f"Session {session_id} cleared"}

@app.get("/analytics")
async def get_analytics():
    """Get training analytics"""
    return analytics_data

@app.get("/personas")
async def get_personas():
    """Get available customer personas"""
    return PERSONAS

@app.get("/products")
async def get_products():
    """Get available products"""
    return PRODUCTS

@app.get("/coaching-tips/{phase}")
async def get_coaching_tips_endpoint(phase: str, persona: str = "young-professional"):
    """Get coaching tips for a specific phase"""
    return get_coaching_tips(phase, persona)

@app.get("/languages")
async def get_languages():
    """Get available languages"""
    return LANGUAGE_CODES

# WebSocket endpoint for real-time communication
@app.websocket("/ws/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    await websocket.accept()
    active_connections[session_id] = websocket
    print(f"INFO:     WebSocket connection opened for session {session_id}")

    try:
        while True:
            # Try to receive a JSON message
            try:
                message = await websocket.receive_json()

                # Handle different message types
                if message.get("type") == "start_listening":
                    print("INFO:     Received start_listening message.")
                    await websocket.send_json({"type": "listening_started"})
                    continue
                elif message.get("type") == "stop_listening":
                    print("INFO:     Received stop_listening message.")
                    await websocket.send_json({"type": "listening_stopped"})
                    continue
                elif message.get("type") == "audio_chunk":
                    # For demo purposes, use the transcript from the message
                    audio_data = base64.b64decode(message.get("audio", ""))
                    transcript, language = await transcribe_audio(audio_data)

                    if not transcript.strip():
                        continue

                    # Update session conversation
                    if session_id in sessions:
                        session = sessions[session_id]

                        # Add user message
                        user_message = ChatMessage(
                            text=transcript,
                            speaker="user",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(user_message.model_dump())

                        # Generate AI response
                        ai_response_text = await generate_ai_response(session_id, transcript)

                        # Add AI message
                        ai_message = ChatMessage(
                            text=ai_response_text,
                            speaker="ai",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(ai_message.model_dump())

                        # Send response back
                        response_data = {
                            "type": "ai_response",
                            "text": ai_response_text,
                            "transcript": transcript,
                            "current_phase": session["current_phase"],
                            "coaching_tips": [tip.model_dump() for tip in get_coaching_tips(session["current_phase"], session["config"]["persona"])]
                        }

                        await websocket.send_json(response_data)
                        print(f"INFO:     Sent AI response for session {session_id}.")

            except json.JSONDecodeError:
                # If JSON parsing fails, it might be a binary message (like raw audio)
                # Try to receive as bytes
                try:
                    audio_data = await websocket.receive_bytes()
                    print(f"INFO:     Received binary data (length: {len(audio_data)} bytes). Attempting transcription.")

                    transcript, language = await transcribe_audio(audio_data)

                    if transcript.strip() and session_id in sessions:
                        session = sessions[session_id]

                        # Add user message
                        user_message = ChatMessage(
                            text=transcript,
                            speaker="user",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(user_message.model_dump())

                        # Generate AI response
                        ai_response_text = await generate_ai_response(session_id, transcript)

                        # Add AI message
                        ai_message = ChatMessage(
                            text=ai_response_text,
                            speaker="ai",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(ai_message.model_dump())

                        # Send response back
                        response_data = {
                            "type": "ai_response",
                            "text": ai_response_text,
                            "transcript": transcript,
                            "current_phase": session["current_phase"],
                            "coaching_tips": [tip.model_dump() for tip in get_coaching_tips(session["current_phase"], session["config"]["persona"])]
                        }

                        await websocket.send_json(response_data)
                        print(f"INFO:     Transcribed and sent AI response for session {session_id}.")

                except Exception as e:
                    print(f"ERROR:    Failed to process binary WebSocket message for session {session_id}: {e}")
                    # Optionally, send an error back to the client
                    await websocket.send_json({"type": "error", "message": "Failed to process audio message."})
                    break # Break the loop on critical errors
            except Exception as e:
                print(f"ERROR:    Unexpected error in WebSocket receive loop for session {session_id}: {e}")
                # Optionally, send an error back to the client
                await websocket.send_json({"type": "error", "message": "An unexpected error occurred."})
                break # Break the loop on unexpected errors

    except WebSocketDisconnect:
        print(f"INFO:     WebSocket connection closed for session {session_id}")
        if session_id in active_connections:
            del active_connections[session_id]
    except Exception as e:
        print(f"CRITICAL ERROR: Unhandled exception in websocket_endpoint for session {session_id}: {e}")
        if session_id in active_connections:
            # Attempt to gracefully close the connection if still open
            try:
                await active_connections[session_id].close(code=1011) # 1011: Internal Error
            except RuntimeError:
                pass # Already closed
            del active_connections[session_id]

# Traditional HTTP endpoints for testing
@app.post("/transcribe")
async def transcribe_endpoint(file: UploadFile = File(...)):
    """Transcribe audio file"""
    if not file.filename.lower().endswith(('.wav', '.mp3', '.m4a', '.ogg')):
        raise HTTPException(status_code=400, detail="Unsupported audio format")

    audio_data = await file.read()
    transcript, language = await transcribe_audio(audio_data)

    return {
        "transcript": transcript,
        "language": language
    }

@app.post("/chat/{session_id}")
async def chat_endpoint(session_id: str, text: str = Form(...)):
    """Chat with text input"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    ai_response = await generate_ai_response(session_id, text)

    return {
        "user_input": text,
        "ai_response": ai_response
    }

@app.post("/generate-audio")
async def generate_audio_endpoint(request_data: dict):
    """Generate audio from text"""
    text = request_data.get("text", "")
    voice_settings = request_data.get("voiceSettings", {"gender": "female", "language": "en"})
    voice_gender = voice_settings.get("gender", "female")
    language = voice_settings.get("language", "en")

    if not text:
        raise HTTPException(status_code=400, detail="Text is required")

    audio_data = await text_to_speech(text, voice_gender, language)

    if audio_data:
        audio_base64 = base64.b64encode(audio_data).decode('utf-8')
        return {"audio": audio_base64}
    else:
        raise HTTPException(status_code=500, detail="Failed to generate audio")

@app.post("/tts")
async def tts_endpoint(text: str = Form(...), voice_gender: str = Form("female"), language: str = Form("en")):
    """Convert text to speech"""
    audio_data = await text_to_speech(text, voice_gender, language)

    return StreamingResponse(
        BytesIO(audio_data),
        media_type="audio/mpeg",
        headers={"Content-Disposition": "attachment; filename=speech.mp3"}
    )

if __name__ == "__main__":
    # Check API keys
    if not os.getenv("GROQ_API_KEY"):
        print("GROQ_API_KEY environment variable not set!")
        sys.exit(1)

    if not os.getenv("ELEVENLABS_API_KEY"):
        print("ELEVENLABS_API_KEY environment variable not set!")
        sys.exit(1)

    print("🚀 Starting Fintech Training API...")
    print("📊 Session management: ✓")
    print("🎭 Persona system: ✓")
    print("📱 Product catalog: ✓")
    print("🎤 Voice processing: ✓")
    print("📈 Analytics: ✓")
    print("🌐 WebSocket support: ✓")

    uvicorn.run(app, host="0.0.0.0", port=5000)
-----------------local tts-----------------------------------------
from fastapi import FastAPI, File, UploadFile, HTTPException, Form, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
import tempfile
import os
import sys
from io import BytesIO
from groq import Groq
from gtts import gTTS  # Replace pyttsx3 with gTTS
import numpy as np
import soundfile as sf  # Add soundfile for audio processing
from dotenv import load_dotenv
from collections import defaultdict
import json
from pydantic import BaseModel
from typing import Optional, Dict, List, Any
import uvicorn
import uuid
from datetime import datetime, timedelta
import asyncio
import base64
import torch
from TTS.api import TTS

# Load environment variables
load_dotenv()

# Initialize Groq client
client = Groq(api_key=os.getenv("GROQ_API_KEY"))

# Voice settings for XTTS v2 (Coqui TTS)
VOICE_SETTINGS = {
    "male": {
        "name": "Josh",
        "language": "en",
        "reference_audio": "reference_audio/male.wav"  # Place a clear male WAV file here
    },
    "female": {
        "name": "Rachel",
        "language": "en",
        "reference_audio": "reference_audio/female.wav"  # Place a clear female WAV file here
    }
}

# App configuration
app = FastAPI(title="Fintech Training AI Customer Interaction API", version="1.0.0")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Personas configuration
PERSONAS = {
    "young-professional": {
        "name": "Young Professional",
        "traits": "Tech-savvy, ambitious, values efficiency",
        "behavior": "Direct questions about features, mobile app functionality, and rewards",
        "objections": ["Time constraints", "Already has solutions", "Prefers digital-first approaches"]
    },
    "retiree": {
        "name": "Retiree",
        "traits": "Conservative, values security and stability",
        "behavior": "Concerned about fees, security, and wants detailed explanations",
        "objections": ["Trust issues", "Complexity concerns", "Fixed income constraints"]
    },
    "family-oriented": {
        "name": "Family Person",
        "traits": "Protective, focused on family financial security",
        "behavior": "Asks about family coverage, educational benefits, and cost savings",
        "objections": ["Budget limitations", "Family priorities", "Existing commitments"]
    },
    "skeptical-veteran": {
        "name": "Skeptical Veteran",
        "traits": "Experienced, hard to convince, asks tough questions",
        "behavior": "Challenges claims, asks for proof, compares with competitors",
        "objections": ["Seen it all before", "Prove the value", "Why switch from current provider"]
    }
}

# Products configuration
PRODUCTS = {
    "credit-card": {
        "name": "Platinum Credit Card",
        "features": ["No annual fee", "2% cashback", "Travel insurance", "24/7 support"],
        "target_audience": "All personas",
        "key_benefits": "Reward earning and financial flexibility"
    },
    "health-insurance": {
        "name": "Comprehensive Health Plan",
        "features": ["Full coverage", "Preventive care", "Specialist access", "Prescription coverage"],
        "target_audience": "Family person, retiree",
        "key_benefits": "Health security and cost savings"
    },
    "life-insurance": {
        "name": "Life Protection Plus",
        "features": ["Term and whole life options", "Living benefits", "Cash value", "Flexible premiums"],
        "target_audience": "Family person, young professional",
        "key_benefits": "Financial protection for loved ones"
    },
    "home-loan": {
        "name": "Smart Home Loan",
        "features": ["Low interest rates", "Flexible terms", "Digital application", "Fast approval"],
        "target_audience": "Young professional, family person",
        "key_benefits": "Homeownership made accessible"
    }
}

# Conversation phases
CONVERSATION_PHASES = [
    "greeting",
    "needs_assessment",
    "product_presentation",
    "handle_objections",
    "closing"
]

# Difficulty levels
DIFFICULTY_LEVELS = {
    "beginner": {
        "objection_frequency": 0.3,
        "objection_complexity": "simple",
        "resistance_level": "low"
    },
    "intermediate": {
        "objection_frequency": 0.5,
        "objection_complexity": "moderate",
        "resistance_level": "medium"
    },
    "advanced": {
        "objection_frequency": 0.7,
        "objection_complexity": "complex",
        "resistance_level": "high"
    }
}

# Language settings
LANGUAGE_CODES = {
    "en": "English",
    "hi": "Hindi",
    "bn": "Bengali",
    "te": "Telugu",
    "mr": "Marathi",
    "ta": "Tamil",
    "ur": "Urdu",
    "gu": "Gujarati",
    "kn": "Kannada",
    "or": "Odia",
    "pa": "Punjabi"
}

# Global storage (in production, use proper database)
sessions = {}
analytics_data = {
    "total_sessions": 0,
    "average_score": 0,
    "improvement_rate": 0,
    "completion_rate": 0,
    "persona_performance": defaultdict(list),
    "product_performance": defaultdict(list),
    "recent_sessions": [],
    "achievements": []
}

# WebSocket connections
active_connections: Dict[str, WebSocket] = {}

# Pydantic models
class SessionConfig(BaseModel):
    persona: str
    product: str
    difficulty: str
    voiceSettings: dict = {"gender": "female", "language": "en"}
    voice_tone: str = "neutral"
    user_name: str = "Agent"

class ChatMessage(BaseModel):
    text: str
    speaker: str  # "user" or "ai"
    timestamp: datetime
    phase: str

class SessionData(BaseModel):
    session_id: str
    config: SessionConfig
    conversation: List[ChatMessage]
    current_phase: str
    start_time: datetime
    end_time: Optional[datetime]
    score: Optional[int]
    is_active: bool

class CoachingTip(BaseModel):
    phase: str
    tip: str
    priority: str

# Helper functions
def generate_session_id():
    return str(uuid.uuid4())

def get_coaching_tips(phase: str, persona: str) -> List[CoachingTip]:
    tips = {
        "greeting": [
            CoachingTip(phase="greeting", tip="Start with a warm, professional greeting", priority="high"),
            CoachingTip(phase="greeting", tip="Introduce yourself and your company clearly", priority="high"),
            CoachingTip(phase="greeting", tip="Ask permission to discuss financial solutions", priority="medium")
        ],
        "needs_assessment": [
            CoachingTip(phase="needs_assessment", tip="Ask open-ended questions about their current situation", priority="high"),
            CoachingTip(phase="needs_assessment", tip="Listen actively and take notes", priority="high"),
            CoachingTip(phase="needs_assessment", tip="Identify pain points and opportunities", priority="medium")
        ],
        "product_presentation": [
            CoachingTip(phase="product_presentation", tip="Focus on benefits that match their needs", priority="high"),
            CoachingTip(phase="product_presentation", tip="Use specific examples and scenarios", priority="medium"),
            CoachingTip(phase="product_presentation", tip="Avoid overwhelming with too many features", priority="medium")
        ],
        "handle_objections": [
            CoachingTip(phase="handle_objections", tip="Acknowledge their concerns first", priority="high"),
            CoachingTip(phase="handle_objections", tip="Ask clarifying questions to understand the objection", priority="high"),
            CoachingTip(phase="handle_objections", tip="Provide evidence-based responses", priority="medium")
        ],
        "closing": [
            CoachingTip(phase="closing", tip="Summarize the key benefits discussed", priority="high"),
            CoachingTip(phase="closing", tip="Ask for the commitment clearly", priority="high"),
            CoachingTip(phase="closing", tip="Handle final concerns and set next steps", priority="medium")
        ]
    }
    return tips.get(phase, [])

def generate_ai_prompt(config, phase: str, conversation_history: List[ChatMessage]) -> str:
    # Handle both dict and SessionConfig object
    if isinstance(config, dict):
        persona_key = config["persona"]
        product_key = config["product"]
        difficulty_key = config["difficulty"]
    else:
        persona_key = config.persona
        product_key = config.product
        difficulty_key = config.difficulty

    # Map difficulty values to DIFFICULTY_LEVELS keys
    difficulty_mapping = {
        "easy": "beginner",
        "medium": "intermediate",
        "hard": "advanced",
        "beginner": "beginner",
        "intermediate": "intermediate",
        "advanced": "advanced"
    }

    mapped_difficulty = difficulty_mapping.get(difficulty_key, "intermediate")

    persona = PERSONAS[persona_key]
    product = PRODUCTS[product_key]
    difficulty = DIFFICULTY_LEVELS[mapped_difficulty]

    base_prompt = f"""You are roleplaying as a {persona['name']} customer in a financial services training simulation.

PERSONA TRAITS: {persona['traits']}
BEHAVIOR: {persona['behavior']}
TYPICAL OBJECTIONS: {', '.join(persona['objections'])}

PRODUCT BEING DISCUSSED: {product['name']}
PRODUCT FEATURES: {', '.join(product['features'])}

DIFFICULTY LEVEL: {mapped_difficulty.title()}
- Objection frequency: {difficulty['objection_frequency']*100}%
- Resistance level: {difficulty['resistance_level']}

CURRENT PHASE: {phase.replace('_', ' ').title()}

CONVERSATION RULES:
1. Stay in character as the {persona['name']}
2. Be realistic - not every call should end in a sale
3. Raise objections naturally based on your persona
4. Show interest when benefits align with your needs
5. Ask questions that your persona would ask
6. Keep responses conversational and realistic (1-2 sentences max)
7. Don't make it too easy - challenge the agent appropriately

Remember: You are the CUSTOMER, not the salesperson. You can react however you want but condidering the above deatils."""

    if conversation_history:
        # Access 'speaker' and 'text' as dictionary keys, not attributes
        recent_context = "\n".join([f"{msg['speaker']}: {msg['text']}" for msg in conversation_history[-3:]])
        base_prompt += f"\n\nRECENT CONVERSATION:\n{recent_context}"
    return base_prompt

async def transcribe_audio(audio_data: bytes) -> tuple[str, str]:
    """Transcribe audio using Groq Whisper"""
    try:
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
            temp_file.write(audio_data)
            temp_file_path = temp_file.name

        with open(temp_file_path, 'rb') as audio_file:
            transcription = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-large-v3-turbo",
                response_format="verbose_json"
            )

        os.unlink(temp_file_path)

        text = transcription.text.strip()
        language = getattr(transcription, 'language', 'en')

        return text, language

    except Exception as e:
        print(f"Transcription error: {e}")
        return "", "en"

async def generate_ai_response(session_id: str, user_input: str) -> str:
    """Generate AI customer response using Groq"""
    session = sessions.get(session_id)
    if not session:
        return "I'm sorry, I think we got disconnected."

    try:
        prompt = generate_ai_prompt(session['config'], session['current_phase'], session['conversation'])

        messages = [
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_input}
        ]

        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=messages,
            max_tokens=150,
            temperature=0.8
        )

        return response.choices[0].message.content

    except Exception as e:
        print(f"AI response error: {e}")
        return "I'm having trouble hearing you clearly. Could you repeat that?"

def convert_mp3_to_wav(mp3_path: str) -> str:
    """Convert MP3 to WAV format for TTS reference"""
    import pydub
    wav_path = mp3_path.replace('.mp3', '.wav')
    if not os.path.exists(wav_path):
        audio = pydub.AudioSegment.from_mp3(mp3_path)
        audio.export(wav_path, format='wav')
    return wav_path

def chunk_text(text: str, max_length: int = 150) -> List[str]:
    """Split text into smaller chunks for better TTS processing"""
    import re
    
    # Split into sentences more precisely
    sentences = re.split('([.!?]+\s*)', text)
    chunks = []
    current_chunk = ""
    
    for i in range(0, len(sentences)-1, 2):
        sentence = sentences[i] + (sentences[i+1] if i+1 < len(sentences) else '')
        if len(current_chunk) + len(sentence) <= max_length:
            current_chunk += sentence
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = sentence
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    # If any chunk is still too long, split by commas
    final_chunks = []
    for chunk in chunks:
        if len(chunk) > max_length:
            comma_parts = chunk.split(',')
            current = ""
            for part in comma_parts:
                if len(current) + len(part) <= max_length:
                    current += part + (',' if part != comma_parts[-1] else '')
                else:
                    if current:
                        final_chunks.append(current.strip())
                    current = part + (',' if part != comma_parts[-1] else '')
            if current:
                final_chunks.append(current.strip())
        else:
            final_chunks.append(chunk)
    
    return final_chunks

# Check CUDA availability and initialize TTS with GPU support
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {DEVICE}")

if DEVICE == "cuda":
    torch.cuda.empty_cache()
    torch.backends.cudnn.benchmark = True

# Initialize TTS with optimized settings
tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2", 
          gpu=(DEVICE == "cuda"),
          progress_bar=False)
print("TTS Model loaded successfully")

async def text_to_speech(text: str, voice_gender: str = "female", language: str = "en") -> bytes:
    """Convert text to speech using Coqui XTTS v2 with optimized CUDA support."""
    try:
        actual_voice_gender = voice_gender if voice_gender in VOICE_SETTINGS else "female"
        voice_config = VOICE_SETTINGS[actual_voice_gender]
        ref_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), voice_config["reference_audio"])

        # Clear CUDA cache before processing
        if DEVICE == "cuda":
            torch.cuda.empty_cache()

        # Split text into smaller chunks for stable processing
        chunks = chunk_text(text, max_length=75)  # Reduced chunk size
        audio_arrays = []

        for chunk in chunks:
            try:
                # Process each chunk with error handling
                with torch.cuda.device(0):
                    audio_array = await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: tts.tts(
                            text=chunk.strip(),
                            speaker_wav=ref_path,
                            language=voice_config["language"]
                        )
                    )
                    audio_arrays.append(audio_array)
                    
                    # Add a small pause between chunks
                    pause = np.zeros(int(24000 * 0.1))  # 0.1 second pause
                    audio_arrays.append(pause)

                    # Clear CUDA cache after each chunk
                    if DEVICE == "cuda":
                        torch.cuda.empty_cache()

            except Exception as chunk_error:
                print(f"Chunk processing error: {chunk_error}")
                continue

        if not audio_arrays:
            raise Exception("No audio generated successfully")

        # Concatenate all audio chunks
        final_audio = np.concatenate(audio_arrays)

        # Convert to bytes
        audio_buffer = BytesIO()
        sf.write(audio_buffer, final_audio, 24000, format='WAV')
        return audio_buffer.getvalue()

    except Exception as e:
        print(f"TTS error: {str(e)}")
        # Clear CUDA cache on error
        if DEVICE == "cuda":
            torch.cuda.empty_cache()
        return b""

def update_analytics(session: Dict[str, Any]):
    """Update analytics after session completion"""
    global analytics_data

    analytics_data["total_sessions"] += 1

    if session.get("score"):
        # Update average score
        current_avg = analytics_data["average_score"]
        total_sessions = analytics_data["total_sessions"]
        analytics_data["average_score"] = ((current_avg * (total_sessions - 1)) + session["score"]) / total_sessions

    # Update persona and product performance
    config = session["config"]
    analytics_data["persona_performance"][config["persona"]].append(session.get("score", 0))
    analytics_data["product_performance"][config["product"]].append(session.get("score", 0))

    # Add to recent sessions
    analytics_data["recent_sessions"].insert(0, {
        "session_id": session["session_id"],
        "persona": config["persona"],
        "product": config["product"],
        "score": session.get("score", 0),
        "date": session["start_time"].isoformat()
    })

    # Keep only last 10 sessions
    analytics_data["recent_sessions"] = analytics_data["recent_sessions"][:10]

# API Endpoints
@app.get("/")
async def root():
    return {
        "message": "Fintech Training AI Customer Interaction API",
        "version": "1.0.0",
        "endpoints": {
            "session": "/session",
            "websocket": "/ws/{session_id}",
            "analytics": "/analytics"
        }
    }

@app.post("/session")
async def start_session(config: SessionConfig):
    """Start a new training session"""
    session_id = generate_session_id()

    # Generate initial AI response
    persona = PERSONAS[config.persona]
    product = PRODUCTS[config.product]

    initial_prompt = f"""Generate an opening statement as a {persona['name']} customer who just answered a sales call about {product['name']}.
    Be realistic to the persona - show the appropriate level of interest/skepticism. Keep it to 1-2 sentences."""

    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "user", "content": initial_prompt}],
            max_tokens=100,
            temperature=0.8
        )
        initial_response = response.choices[0].message.content
    except:
        initial_response = "Hello, I got your call about some financial products. What exactly are you offering?"

    session_data = {
        "session_id": session_id,
        "config": config.model_dump(),
        "conversation": [],
        "current_phase": "greeting",
        "start_time": datetime.now(),
        "end_time": None,
        "score": None,
        "is_active": True
    }

    sessions[session_id] = session_data

    return {
        "success": True,
        "sessionId": session_id,
        "initialResponse": initial_response,
        "coaching_tips": [tip.model_dump() for tip in get_coaching_tips("greeting", config.persona)]
    }

@app.post("/session/{session_id}/end")
async def end_session(session_id: str, score: Optional[int] = None):
    """End a training session"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    session = sessions[session_id]
    session["end_time"] = datetime.now()
    session["is_active"] = False
    session["score"] = score

    update_analytics(session)

    return {
        "success": True,
        "session_duration": (session["end_time"] - session["start_time"]).total_seconds(),
        "final_score": score
    }

@app.get("/session/{session_id}")
async def get_session(session_id: str):
    """Get session details"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    return sessions[session_id]

@app.delete("/session/{session_id}")
async def clear_session(session_id: str):
    """Clear session history"""
    if session_id in sessions:
        del sessions[session_id]
        if session_id in active_connections:
            del active_connections[session_id]

    return {"success": True, "message": f"Session {session_id} cleared"}

@app.get("/analytics")
async def get_analytics():
    """Get training analytics"""
    return analytics_data

@app.get("/personas")
async def get_personas():
    """Get available customer personas"""
    return PERSONAS

@app.get("/products")
async def get_products():
    """Get available products"""
    return PRODUCTS

@app.get("/coaching-tips/{phase}")
async def get_coaching_tips_endpoint(phase: str, persona: str = "young-professional"):
    """Get coaching tips for a specific phase"""
    return get_coaching_tips(phase, persona)

@app.get("/languages")
async def get_languages():
    """Get available languages"""
    return LANGUAGE_CODES

# WebSocket endpoint for real-time communication
@app.websocket("/ws/{session_id}")
async def websocket_endpoint(websocket: WebSocket, session_id: str):
    await websocket.accept()
    active_connections[session_id] = websocket
    print(f"INFO:     WebSocket connection opened for session {session_id}")

    try:
        while True:
            # Try to receive a JSON message
            try:
                message = await websocket.receive_json()

                # Handle different message types
                if message.get("type") == "start_listening":
                    print("INFO:     Received start_listening message.")
                    await websocket.send_json({"type": "listening_started"})
                    continue
                elif message.get("type") == "stop_listening":
                    print("INFO:     Received stop_listening message.")
                    await websocket.send_json({"type": "listening_stopped"})
                    continue
                elif message.get("type") == "audio_chunk":
                    # For demo purposes, use the transcript from the message
                    audio_data = base64.b64decode(message.get("audio", ""))
                    transcript, language = await transcribe_audio(audio_data)

                    if not transcript.strip():
                        continue

                    # Update session conversation
                    if session_id in sessions:
                        session = sessions[session_id]

                        # Add user message
                        user_message = ChatMessage(
                            text=transcript,
                            speaker="user",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(user_message.model_dump())

                        # Generate AI response
                        ai_response_text = await generate_ai_response(session_id, transcript)

                        # Add AI message
                        ai_message = ChatMessage(
                            text=ai_response_text,
                            speaker="ai",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(ai_message.model_dump())

                        # Send response back
                        response_data = {
                            "type": "ai_response",
                            "text": ai_response_text,
                            "transcript": transcript,
                            "current_phase": session["current_phase"],
                            "coaching_tips": [tip.model_dump() for tip in get_coaching_tips(session["current_phase"], session["config"]["persona"])]
                        }

                        await websocket.send_json(response_data)
                        print(f"INFO:     Sent AI response for session {session_id}.")

            except json.JSONDecodeError:
                # If JSON parsing fails, it might be a binary message (like raw audio)
                # Try to receive as bytes
                try:
                    audio_data = await websocket.receive_bytes()
                    print(f"INFO:     Received binary data (length: {len(audio_data)} bytes). Attempting transcription.")

                    transcript, language = await transcribe_audio(audio_data)

                    if transcript.strip() and session_id in sessions:
                        session = sessions[session_id]

                        # Add user message
                        user_message = ChatMessage(
                            text=transcript,
                            speaker="user",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(user_message.model_dump())

                        # Generate AI response
                        ai_response_text = await generate_ai_response(session_id, transcript)

                        # Add AI message
                        ai_message = ChatMessage(
                            text=ai_response_text,
                            speaker="ai",
                            timestamp=datetime.now(),
                            phase=session["current_phase"]
                        )
                        session["conversation"].append(ai_message.model_dump())

                        # Send response back
                        response_data = {
                            "type": "ai_response",
                            "text": ai_response_text,
                            "transcript": transcript,
                            "current_phase": session["current_phase"],
                            "coaching_tips": [tip.model_dump() for tip in get_coaching_tips(session["current_phase"], session["config"]["persona"])]
                        }

                        await websocket.send_json(response_data)
                        print(f"INFO:     Transcribed and sent AI response for session {session_id}.")

                except Exception as e:
                    print(f"ERROR:    Failed to process binary WebSocket message for session {session_id}: {e}")
                    # Optionally, send an error back to the client
                    await websocket.send_json({"type": "error", "message": "Failed to process audio message."})
                    break # Break the loop on critical errors
            except Exception as e:
                print(f"ERROR:    Unexpected error in WebSocket receive loop for session {session_id}: {e}")
                # Optionally, send an error back to the client
                await websocket.send_json({"type": "error", "message": "An unexpected error occurred."})
                break # Break the loop on unexpected errors

    except WebSocketDisconnect:
        print(f"INFO:     WebSocket connection closed for session {session_id}")
        if session_id in active_connections:
            del active_connections[session_id]
    except Exception as e:
        print(f"CRITICAL ERROR: Unhandled exception in websocket_endpoint for session {session_id}: {e}")
        if session_id in active_connections:
            # Attempt to gracefully close the connection if still open
            try:
                await active_connections[session_id].close(code=1011) # 1011: Internal Error
            except RuntimeError:
                pass # Already closed
            del active_connections[session_id]

# Traditional HTTP endpoints for testing
@app.post("/transcribe")
async def transcribe_endpoint(file: UploadFile = File(...)):
    """Transcribe audio file"""
    if not file.filename.lower().endswith(('.wav', '.mp3', '.m4a', '.ogg')):
        raise HTTPException(status_code=400, detail="Unsupported audio format")

    audio_data = await file.read()
    transcript, language = await transcribe_audio(audio_data)

    return {
        "transcript": transcript,
        "language": language
    }

@app.post("/chat/{session_id}")
async def chat_endpoint(session_id: str, text: str = Form(...)):
    """Chat with text input"""
    if session_id not in sessions:
        raise HTTPException(status_code=404, detail="Session not found")

    ai_response = await generate_ai_response(session_id, text)

    return {
        "user_input": text,
        "ai_response": ai_response
    }

@app.post("/generate-audio")
async def generate_audio_endpoint(request_data: dict):
    """Generate audio from text"""
    text = request_data.get("text", "")
    voice_settings = request_data.get("voiceSettings", {"gender": "female", "language": "en"})
    voice_gender = voice_settings.get("gender", "female")
    language = voice_settings.get("language", "en")

    if not text:
        raise HTTPException(status_code=400, detail="Text is required")

    audio_data = await text_to_speech(text, voice_gender, language)

    if audio_data:
        audio_base64 = base64.b64encode(audio_data).decode('utf-8')
        return {"audio": audio_base64}
    else:
        raise HTTPException(status_code=500, detail="Failed to generate audio")

@app.post("/tts")
async def tts_endpoint(text: str = Form(...), voice_gender: str = Form("female"), language: str = Form("en")):
    """Convert text to speech"""
    audio_data = await text_to_speech(text, voice_gender, language)

    return StreamingResponse(
        BytesIO(audio_data),
        media_type="audio/mpeg",
        headers={"Content-Disposition": "attachment; filename=speech.mp3"}
    )

if __name__ == "__main__":
    # Check API keys
    if not os.getenv("GROQ_API_KEY"):
        print("GROQ_API_KEY environment variable not set!")
        sys.exit(1)

    print("🚀 Starting Fintech Training API...")
    print("📊 Session management: ✓")
    print("🎭 Persona system: ✓")
    print("📱 Product catalog: ✓")
    print("🎤 Voice processing: ✓")
    print("📈 Analytics: ✓")
    print("🌐 WebSocket support: ✓")

    uvicorn.run(app, host="0.0.0.0", port=5000)


    ---------------------------Deployed ----------------------------------
    import React, { useState, useRef, useEffect } from "react";
import {
  User,
  CreditCard,
  Shield,
  Home,
  Heart,
  Mic,
  MicOff,
  Settings,
  Play,
  BarChart3,
  Sparkles,
  Brain,
  Target,
  Zap,
} from "lucide-react";

const analyticsData = {
  totalSessions: 24,
  averageScore: 78,
  improvementRate: 12,
  totalHours: 18.5,
  weeklyGoal: 20,
  streak: 5,
  recentSessions: [
    {
      date: "Today",
      score: 85,
      product: "Credit Card",
      persona: "Young Professional",
      duration: "12:45",
      objections: 3,
      closingRate: 85,
    },
    {
      date: "Yesterday",
      score: 72,
      product: "Health Insurance",
      persona: "Retiree",
      duration: "15:30",
      objections: 5,
      closingRate: 60,
    },
    {
      date: "2 days ago",
      score: 91,
      product: "Life Insurance",
      persona: "Family Person",
      duration: "11:20",
      objections: 2,
      closingRate: 95,
    },
    {
      date: "3 days ago",
      score: 68,
      product: "Home Loan",
      persona: "Skeptical Veteran",
      duration: "18:15",
      objections: 7,
      closingRate: 45,
    },
  ],
  skillBreakdown: [
    {
      skill: "Opening",
      score: 85,
      improvement: "+8%",
      trend: "up",
      lastWeek: 77,
    },
    {
      skill: "Needs Assessment",
      score: 72,
      improvement: "+15%",
      trend: "up",
      lastWeek: 57,
    },
    {
      skill: "Product Knowledge",
      score: 90,
      improvement: "+5%",
      trend: "up",
      lastWeek: 85,
    },
    {
      skill: "Objection Handling",
      score: 65,
      improvement: "+20%",
      trend: "up",
      lastWeek: 45,
    },
    {
      skill: "Closing",
      score: 80,
      improvement: "+10%",
      trend: "up",
      lastWeek: 70,
    },
  ],
  monthlyProgress: [
    { month: "Oct", score: 65 },
    { month: "Nov", score: 71 },
    { month: "Dec", score: 78 },
    { month: "Jan", score: 82 },
  ],
  personaPerformance: [
    { persona: "Young Professional", sessions: 8, avgScore: 82, winRate: 75 },
    { persona: "Retiree", sessions: 6, avgScore: 74, winRate: 65 },
    { persona: "Family Person", sessions: 5, avgScore: 85, winRate: 80 },
    { persona: "Skeptical Veteran", sessions: 5, avgScore: 68, winRate: 55 },
  ],
  productPerformance: [
    { product: "Credit Card", sessions: 7, avgScore: 79, conversionRate: 71 },
    {
      product: "Health Insurance",
      sessions: 6,
      avgScore: 75,
      conversionRate: 67,
    },
    {
      product: "Life Insurance",
      sessions: 6,
      avgScore: 83,
      conversionRate: 78,
    },
    { product: "Home Loan", sessions: 5, avgScore: 72, conversionRate: 60 },
  ],
  achievements: [
    {
      title: "First Success",
      description: "Completed your first training session",
      unlocked: true,
    },
    {
      title: "Consistent Learner",
      description: "Train for 5 days in a row",
      unlocked: true,
    },
    {
      title: "Objection Master",
      description: "Handle 10 objections successfully",
      unlocked: true,
    },
    {
      title: "Sales Expert",
      description: "Achieve 90+ score in a session",
      unlocked: true,
    },
    {
      title: "Product Specialist",
      description: "Master all 4 products",
      unlocked: false,
    },
    {
      title: "Persona Whisperer",
      description: "Excel with all customer types",
      unlocked: false,
    },
  ],
};

const FintechTrainingApp = () => {
  const [activeTab, setActiveTab] = useState("configure");
  const [selectedPersona, setSelectedPersona] = useState("young-professional");
  const [selectedProduct, setSelectedProduct] = useState("credit-card");
  const [voiceGender, setVoiceGender] = useState("female");
  const [voiceTone, setVoiceTone] = useState("neutral");
  const [isVoiceEnabled, setIsVoiceEnabled] = useState(true);
  const [difficulty, setDifficulty] = useState("medium");
  const [isTraining, setIsTraining] = useState(false);
  const [currentPhase, setCurrentPhase] = useState("greeting");
  const [isRecording, setIsRecording] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [conversation, setConversation] = useState([]);
  const [isSessionActive, setIsSessionActive] = useState(false);
  const websocketRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const audioChunksRef = useRef([]);
  const [isConnected, setIsConnected] = useState(false);
  const [aiResponse, setAiResponse] = useState(
    "Hello, I received a call about some financial products. To be honest, I'm quite busy and not really interested in another sales pitch. What makes your offering different?",
  );
  const [realAnalytics, setRealAnalytics] = useState(analyticsData);
  const [isLiveMode, setIsLiveMode] = useState(true);
  const [selectedVoice, setSelectedVoice] = useState("female");
  const [selectedLanguage, setSelectedLanguage] = useState("en"); // Default language is English
  const audioRef = useRef(null);

  const personas = [
    {
      id: "young-professional",
      name: "Young Professional",
      age: "25-35",
      income: "Mid-High",
      icon: User,
      color: "linear-gradient(135deg, #3b82f6, #8b5cf6)",
      description: "Tech-savvy, ambitious, values efficiency",
    },
    {
      id: "retiree",
      name: "Retiree",
      age: "60+",
      income: "Fixed",
      icon: Heart,
      color: "linear-gradient(135deg, #10b981, #0d9488)",
      description: "Conservative, values security and stability",
    },
    {
      id: "family-oriented",
      name: "Family Person",
      age: "35-50",
      income: "Stable",
      icon: Home,
      color: "linear-gradient(135deg, #f97316, #dc2626)",
      description: "Protective, focused on family financial security",
    },
    {
      id: "skeptical-veteran",
      name: "Skeptical Veteran",
      age: "45-65",
      income: "High",
      icon: Shield,
      color: "linear-gradient(135deg, #64748b, #374151)",
      description: "Experienced, hard to convince, asks tough questions",
    },
  ];

  const products = [
    {
      id: "credit-card",
      name: "Platinum Credit Card",
      category: "Premium Cards",
      details: "2.5% cashback • No foreign fees • Premium rewards",
      icon: CreditCard,
      color: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
      features: ["Cashback Rewards", "Travel Benefits", "Purchase Protection"],
    },
    {
      id: "health-insurance",
      name: "Comprehensive Health Plan",
      category: "Health Coverage",
      details: "Full coverage • Wellness programs • Digital consultations",
      icon: Shield,
      color: "linear-gradient(135deg, #06b6d4, #3b82f6)",
      features: ["100% Coverage", "Preventive Care", "Mental Health"],
    },
    {
      id: "life-insurance",
      name: "Life Protection Plus",
      category: "Life Insurance",
      details: "Term & whole life • Investment component • Family protection",
      icon: Heart,
      color: "linear-gradient(135deg, #f43f5e, #ec4899)",
      features: ["Flexible Terms", "Investment Options", "Family Benefits"],
    },
    {
      id: "home-loan",
      name: "Smart Home Loan",
      category: "Property Finance",
      details: "Competitive rates • Fast approval • Digital process",
      icon: Home,
      color: "linear-gradient(135deg, #22c55e, #059669)",
      features: ["Low Interest", "Quick Processing", "Flexible EMI"],
    },
  ];

  const voiceOptions = {
    gender: [
      { id: "male", name: "Male", icon: "👨" },
      { id: "female", name: "Female", icon: "👩" },
      { id: "neutral", name: "Neutral", icon: "🤖" },
    ],
    tone: [
      { id: "neutral", name: "Neutral", emoji: "😐" },
      { id: "enthusiastic", name: "Enthusiastic", emoji: "😊" },
      { id: "skeptical", name: "Skeptical", emoji: "🤔" },
      { id: "friendly", name: "Friendly", emoji: "😄" },
      { id: "professional", name: "Professional", emoji: "💼" },
    ],
  };

  const difficultyLevels = [
    {
      id: "easy",
      name: "Beginner",
      color: "#22c55e",
      description: "Cooperative customer, basic objections",
    },
    {
      id: "medium",
      name: "Intermediate",
      color: "#eab308",
      description: "Moderate resistance, common objections",
    },
    {
      id: "hard",
      name: "Advanced",
      color: "#ef4444",
      description: "Challenging customer, complex objections",
    },
  ];

  const languages = [
    { id: "en", name: "English" },
    { id: "hi", name: "Hindi" },
    { id: "bn", name: "Bengali" },
    { id: "te", name: "Telugu" },
    { id: "mr", name: "Marathi" },
    { id: "ta", name: "Tamil" },
    { id: "ur", name: "Urdu" },
    { id: "gu", name: "Gujarati" },
    { id: "kn", name: "Kannada" },
    { id: "or", name: "Odia" },
    { id: "pa", name: "Punjabi" },
  ];

  // WebSocket connection setup
  const connectWebSocket = (sessionId) => {
    if (!sessionId) {
      console.error("Cannot connect WebSocket: sessionId is null");
      return;
    }

    const wsUrl = `wss://omprakash8639-stt-llm-tts.hf.space/ws/${sessionId}`;
    console.log("Connecting to WebSocket:", wsUrl);
    websocketRef.current = new WebSocket(wsUrl);


    websocketRef.current.onopen = () => {
      console.log("WebSocket connected");
      setIsConnected(true);
    };

    websocketRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log("WebSocket message received:", data);

          if (data.type === "listening_started") {
            console.log("Backend started listening");
          } else if (data.type === "listening_stopped") {
            console.log("Backend stopped listening");
          } else if (data.type === "transcription") {
            setConversation((prev) => [
              ...prev,
              { role: "user", content: data.text, timestamp: new Date() }
            ]);
          } else if (data.type === "ai_response") {
            // Add user message first if transcript exists
            if (data.transcript) {
              setConversation((prev) => [
                ...prev,
                { role: "user", content: data.transcript, timestamp: new Date() }
              ]);
            }

            // Then add AI response
            setConversation((prev) => [
              ...prev,
              { role: "assistant", content: data.text, timestamp: new Date() },
            ]);

            // Generate and play audio response
            generateAudioResponse(data.text);
          } else if (data.type === "error") {
            console.error("WebSocket error:", data.message);
          }
        } catch (error) {
          console.error("Error parsing WebSocket message:", error);
        }
      };

    websocketRef.current.onclose = () => {
      console.log("WebSocket disconnected");
      setIsConnected(false);
    };

    websocketRef.current.onerror = (error) => {
      console.error("WebSocket error:", error);
    };
  };

const handleStartSession = async () => {
  try {

    const baseUrl = "https://omprakash8639-stt-llm-tts.hf.space";

    const payload = {
      persona: selectedPersona || "young-professional",
      product: selectedProduct || "credit-card",
      difficulty: difficulty || "easy",
      voiceSettings: {
        gender: voiceGender || "female",
        language: selectedLanguage || "en"
      }
    };

    console.log("📡 Sending POST to:", `${baseUrl}/session`);
    console.log("📦 Payload:", payload);

    const response = await fetch(`${baseUrl}/session`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("❌ Backend error:", errorText);
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    console.log("✅ Session started:", data);

    if (data.success) {
      const newSessionId = data.sessionId;
      setSessionId(newSessionId);
      setConversation([
        {
          role: "assistant",
          content: data.initialResponse,
          timestamp: new Date(),
        },
      ]);
      setIsSessionActive(true);
      setActiveTab("practice");

      // Connect WebSocket after session is created
      setTimeout(() => {
        connectWebSocket(newSessionId);
      }, 500); // Increased delay to ensure sessionId is set

      // Generate and play initial audio
      generateAudioResponse(data.initialResponse);
    } else {
      console.error("API returned success: false", data);
      alert("Backend failed to start session.");
    }
  } catch (error) {
    console.error("Failed to start session:", error.message);
    alert("Failed to start session. Check backend or network.");
  }
};


  // Initialize media recorder
  const initializeMediaRecorder = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        }
      });

      mediaRecorderRef.current = new MediaRecorder(stream, {
          mimeType: 'audio/webm;codecs=opus'
        });
      streamRef.current = stream;

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      // Handle when recording stops
      mediaRecorderRef.current.onstop = () => {
        console.log("MediaRecorder stopped, processing audio...");
        if (audioChunksRef.current.length > 0) {
          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
          console.log("Audio blob created, size:", audioBlob.size);
          processAudioBlob(audioBlob);
          // Clear chunks for next recording
          audioChunksRef.current = [];
        }
      };

      return mediaRecorderRef.current;
    } catch (error) {
      console.error("Failed to initialize media recorder:", error);
      alert(
        "Microphone access is required for voice training. Please allow microphone access and try again.",
      );
    }
  };

  // Process audio blob and send to WebSocket
  const processAudioBlob = async (audioBlob) => {
    if (!websocketRef.current || websocketRef.current.readyState !== WebSocket.OPEN) {
      console.error("WebSocket not connected");
      return;
    }

    console.log("Processing audio blob, size:", audioBlob.size);

    // Convert audio blob to base64
    const reader = new FileReader();
    reader.readAsDataURL(audioBlob);
    reader.onloadend = async () => {
      const base64data = reader.result.split(',')[1];

      // Send audio data to WebSocket for processing
      try {
        websocketRef.current.send(
          JSON.stringify({
            type: "audio_chunk",
            audio: base64data,
            sessionId: sessionId,
          }),
        );
      } catch (error) {
        console.error("Error sending WebSocket message:", error);
      }
    };
  };

  const handleRecord = async () => {
    console.log("Handle record clicked, isRecording:", isRecording);
    console.log("WebSocket state:", websocketRef.current?.readyState);
    console.log("MediaRecorder state:", mediaRecorderRef.current?.state);

    if (!isRecording) {
      // Starting recording
      let currentRecorder = mediaRecorderRef.current;

      if (!currentRecorder || currentRecorder.state === "inactive") {
        console.log("Initializing media recorder...");
        currentRecorder = await initializeMediaRecorder();
        if (!currentRecorder) return;
      }

      setIsRecording(true);

      // Stop any ongoing audio
      stopAudio();

      // Start WebSocket listening
      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {
        console.log("Sending start_listening to WebSocket");
        websocketRef.current.send(
          JSON.stringify({
            type: "start_listening",
            sessionId: sessionId,
          }),
        );
      } else {
        console.log("WebSocket not ready for start_listening");
      }

      if (currentRecorder && currentRecorder.state === "inactive") {
        console.log("Starting recording...");
        // Clear any previous chunks
        audioChunksRef.current = [];
        currentRecorder.start(1000); // Collect data every second
      }
    } else {
      // Stopping recording
      console.log("Stopping recording...");
      setIsRecording(false);

      // Stop any ongoing audio
      stopAudio();

      // Stop WebSocket listening
      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {
        console.log("Sending stop_listening to WebSocket");
        websocketRef.current.send(
          JSON.stringify({
            type: "stop_listening",
            sessionId: sessionId,
          }),
        );
      }

      if (mediaRecorderRef.current && mediaRecorderRef.current.state === "recording") {
        console.log("Stopping media recorder...");
        mediaRecorderRef.current.stop();
      }

      // Stop all tracks to free up the microphone
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
    }
  };

  const stopAudio = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current = null;
    }
  };

  // Generate audio response using ElevenLabs
  const generateAudioResponse = async (text) => {
    try {
      const baseUrl = "https://omprakash8639-stt-llm-tts.hf.space";

      const response = await fetch(`${baseUrl}/generate-audio`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: text,
          voiceSettings: { gender: selectedVoice, language: selectedLanguage },
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.audio) {
          playAudio(data.audio);
        }
      }
    } catch (error) {
      console.error("Failed to generate audio:", error);
    }
  };

  const playAudio = (base64Audio) => {
    try {
      stopAudio(); // Stop any ongoing audio
      const audio = new Audio(`data:audio/mpeg;base64,${base64Audio}`);
      audioRef.current = audio;
      audio.play().catch((error) => {
        console.error("Failed to play audio:", error);
      });
    } catch (error) {
      console.error("Audio playback error:", error);
    }
  };

  const practicePhases = [
    { id: "greeting", name: "Opening & Greeting", status: "completed" },
    { id: "needs", name: "Needs Assessment", status: "current" },
    { id: "presentation", name: "Product Presentation", status: "pending" },
    { id: "objections", name: "Handle Objections", status: "pending" },
    { id: "closing", name: "Closing & Follow-up", status: "pending" },
  ];

  const renderConfigureTab = () => (
    <>
      {/* Customer Persona Card */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #3b82f6, #06b6d4)",
            }}
          >
            <User size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Virtual Customer</h2>
            <p style={styles.subtitle}>Choose your challenge</p>
          </div>
        </div>

        {personas.map((persona) => {
          const IconComponent = persona.icon;
          const isSelected = selectedPersona === persona.id;
          return (
            <button
              key={persona.id}
              onClick={() => setSelectedPersona(persona.id)}
              style={{
                ...styles.optionButton,
                ...(isSelected ? styles.selectedButton : {}),
              }}
            >
              <div style={{ ...styles.personaIcon, background: persona.color }}>
                <IconComponent size={28} color="white" />
              </div>
              <div style={styles.personaContent}>
                <div style={styles.personaName}>{persona.name}</div>
                <div style={styles.personaDescription}>
                  {persona.description}
                </div>
                <div style={styles.tags}>
                  <span style={styles.tag}>{persona.age}</span>
                  <span style={styles.tag}>{persona.income}</span>
                </div>
              </div>
              {isSelected && (
                <div
                  style={{
                    width: "24px",
                    height: "24px",
                    background: "#4ade80",
                    borderRadius: "50%",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <div
                    style={{
                      width: "8px",
                      height: "8px",
                      background: "white",
                      borderRadius: "50%",
                    }}
                  ></div>
                </div>
              )}
            </button>
          );
        })}
      </div>

      {/* Product Selection Card */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #10b981, #0d9488)",
            }}
          >
            <Target size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Product Focus</h2>
            <p style={styles.subtitle}>Select what to pitch</p>
          </div>
        </div>

        {products.map((product) => {
          const IconComponent = product.icon;
          const isSelected = selectedProduct === product.id;
          return (
            <button
              key={product.id}
              onClick={() => setSelectedProduct(product.id)}
              style={{
                ...styles.optionButton,
                ...(isSelected ? styles.selectedButton : {}),
                flexDirection: "column",
                alignItems: "flex-start",
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "16px",
                  width: "100%",
                  marginBottom: isSelected ? "12px" : 0,
                }}
              >
                <div
                  style={{ ...styles.personaIcon, background: product.color }}
                >
                  <IconComponent size={28} color="white" />
                </div>
                <div style={{ flex: 1, textAlign: "left" }}>
                  <div style={styles.personaName}>{product.name}</div>
                  <div style={styles.personaDescription}>{product.details}</div>
                  <span
                    style={{
                      ...styles.tag,
                      background: isSelected
                        ? "rgba(255, 255, 255, 0.3)"
                        : "rgba(255, 255, 255, 0.2)",
                    }}
                  >
                    {product.category}
                  </span>
                </div>
                {isSelected && (
                  <div
                    style={{
                      width: "24px",
                      height: "24px",
                      background: "#4ade80",
                      borderRadius: "50%",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    <div
                      style={{
                        width: "8px",
                        height: "8px",
                        background: "white",
                        borderRadius: "50%",
                      }}
                    ></div>
                  </div>
                )}
              </div>
              {isSelected && (
                <div style={{ display: "flex", gap: "8px", flexWrap: "wrap" }}>
                  {product.features.map((feature, index) => (
                    <span
                      key={index}
                      style={{
                        ...styles.tag,
                        background: "rgba(255, 255, 255, 0.3)",
                      }}
                    >
                      {feature}
                    </span>
                  ))}
                </div>
              )}
            </button>
          );
        })}
      </div>

      {/* Difficulty Level */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #f97316, #ef4444)",
            }}
          >
            <Zap size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Challenge Level</h2>
            <p style={styles.subtitle}>Adjust difficulty</p>
          </div>
        </div>

        <div style={styles.difficultyGrid}>
          {difficultyLevels.map((level) => (
            <button
              key={level.id}
              onClick={() => setDifficulty(level.id)}
              style={{
                ...styles.difficultyButton,
                ...(difficulty === level.id ? styles.selectedButton : {}),
              }}
            >
              <div
                style={{ ...styles.difficultyDot, background: level.color }}
              ></div>
              <div
                style={{
                  fontSize: "14px",
                  fontWeight: "bold",
                  marginBottom: "4px",
                }}
              >
                {level.name}
              </div>
              <div style={{ fontSize: "12px", color: "#c4b5fd" }}>
                {level.description}
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Voice Settings */}
      <div style={styles.card}>
        <div style={styles.voiceToggle}>
          <div style={styles.cardHeader}>
            <div
              style={{
                ...styles.iconContainer,
                background: "linear-gradient(135deg, #ec4899, #f43f5e)",
              }}
            >
              {isVoiceEnabled ? (
                <Mic size={24} color="white" />
              ) : (
                <MicOff size={24} color="white" />
              )}
            </div>
            <div>
              <h2 style={styles.cardTitle}>Voice Experience</h2>
              <p style={styles.subtitle}>Customize AI personality</p>
            </div>
          </div>
          <div
            onClick={() => setIsVoiceEnabled(!isVoiceEnabled)}
            style={{
              ...styles.toggleSwitch,
              background: isVoiceEnabled ? "#22c55e" : "#6b7280",
            }}
          >
            <div
              style={{
                ...styles.toggleHandle,
                transform: isVoiceEnabled
                  ? "translateX(32px)"
                  : "translateX(0)",
              }}
            ></div>
          </div>
        </div>

        {isVoiceEnabled && (
          <div>
            <h3
              style={{
                color: "white",
                fontSize: "18px",
                fontWeight: "600",
                marginBottom: "12px",
              }}
            >
              Voice Gender
            </h3>
            <div style={styles.voiceGrid}>
              {voiceOptions.gender.map((gender) => (
                <button
                  key={gender.id}
                  onClick={() => {
                    setVoiceGender(gender.id);
                    setSelectedVoice(gender.id);
                  }}
                  style={{
                    ...styles.voiceButton,
                    ...(voiceGender === gender.id ? styles.selectedButton : {}),
                  }}
                >
                  <div style={{ fontSize: "24px", marginBottom: "8px" }}>
                    {gender.icon}
                  </div>
                  <div style={{ fontSize: "14px", fontWeight: "500" }}>
                    {gender.name}
                  </div>
                </button>
              ))}
            </div>

            <h3
              style={{
                color: "white",
                fontSize: "18px",
                fontWeight: "600",
                margin: "24px 0 12px",
              }}
            >
              Personality Tone
            </h3>
            <div style={styles.toneGrid}>
              {voiceOptions.tone.map((tone) => (
                <button
                  key={tone.id}
                  onClick={() => setVoiceTone(tone.id)}
                  style={{
                    ...styles.voiceButton,
                    ...(voiceTone === tone.id ? styles.selectedButton : {}),
                  }}
                >
                  <div style={{ fontSize: "20px", marginBottom: "4px" }}>
                    {tone.emoji}
                  </div>
                  <div style={{ fontSize: "14px", fontWeight: "500" }}>
                    {tone.name}
                  </div>
                </button>
              ))}
            </div>

            <h3
              style={{
                color: "white",
                fontSize: "18px",
                fontWeight: "600",
                margin: "24px 0 12px",
              }}
            >
              Language
            </h3>
            <div style={styles.voiceGrid}>
              {languages.map((language) => (
                <button
                  key={language.id}
                  onClick={() => setSelectedLanguage(language.id)}
                  style={{
                    ...styles.voiceButton,
                    ...(selectedLanguage === language.id ? styles.selectedButton : {}),
                  }}
                >
                  <div style={{ fontSize: "14px", fontWeight: "500" }}>
                    {language.name}
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Start Button */}
      <button
        style={styles.startButton}
        onClick={handleStartSession}
      >
        <Play size={32} color="white" />
        <span>Start AI Training Session</span>
        <Sparkles size={24} color="white" />
      </button>
    </>
  );

  const renderPracticeTab = () => (
    <>
      {/* Training Progress */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #22c55e, #059669)",
            }}
          >
            <Play size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Training Session</h2>
            <p style={styles.subtitle}>
              {personas.find((p) => p.id === selectedPersona)?.name} •{" "}
              {products.find((p) => p.id === selectedProduct)?.name}
            </p>
          </div>
        </div>

        <div style={{ marginBottom: "24px" }}>
          {practicePhases.map((phase, index) => (
            <div
              key={phase.id}
              style={{
                display: "flex",
                alignItems: "center",
                gap: "16px",
                padding: "16px",
                marginBottom: "12px",
                borderRadius: "12px",
                background:
                  phase.status === "current"
                    ? "rgba(34, 197, 94, 0.2)"
                    : phase.status === "completed"
                      ? "rgba(255, 255, 255, 0.1)"
                      : "rgba(255, 255, 255, 0.05)",
                border:
                  phase.status === "current"
                    ? "2px solid #22c55e"
                    : "1px solid rgba(255, 255, 255, 0.1)",
              }}
            >
              <div
                style={{
                  width: "32px",
                  height: "32px",
                  borderRadius: "50%",
                  background:
                    phase.status === "completed"
                      ? "#22c55e"
                      : phase.status === "current"
                        ? "#3b82f6"
                        : "#6b7280",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  color: "white",
                  fontSize: "14px",
                  fontWeight: "bold",
                }}
              >
                {phase.status === "completed" ? "✓" : index + 1}
              </div>
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    color: "white",
                    fontWeight: "600",
                    fontSize: "16px",
                    marginBottom: "4px",
                  }}
                >
                  {phase.name}
                </div>
                <div
                  style={{
                    color: phase.status === "current" ? "#4ade80" : "#9ca3af",
                    fontSize: "14px",
                    textTransform: "capitalize",
                  }}
                >
                  {phase.status === "current" ? "In Progress" : phase.status}
                </div>
                              </div>
            </div>
          ))}
        </div>
      </div>

      {/* AI Conversation */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
            }}
          >
            <Brain size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>AI Customer Interaction</h2>
            <p style={styles.subtitle}>Practice your pitch in real-time</p>
          </div>
        </div>

        <div
          style={{
            background: "rgba(0, 0, 0, 0.3)",
            borderRadius: "16px",
            padding: "20px",
            marginBottom: "20px",
            minHeight: "200px",
          }}
        >
          <div
            style={{
              display: "flex",
              alignItems: "center",
              gap: "12px",
              marginBottom: "16px",
            }}
          >
            <div
              style={{
                width: "40px",
                height: "40px",
                background: personas.find((p) => p.id === selectedPersona)
                  ?.color,
                borderRadius: "50%",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <User size={20} color="white" />
            </div>
            <div>
              <div style={{ color: "white", fontWeight: "600" }}>
                {personas.find((p) => p.id === selectedPersona)?.name}
              </div>
              <div style={{ color: "#9ca3af", fontSize: "14px" }}>
                Virtual Customer
              </div>
            </div>
          </div>

          <div
            style={{
              maxHeight: "300px",
              overflowY: "auto",
              display: "flex",
              flexDirection: "column",
              gap: "12px",
            }}
          >
            {conversation.length === 0 ? (
              <div
                style={{
                  background: "rgba(255, 255, 255, 0.1)",
                  padding: "16px",
                  borderRadius: "12px",
                  color: "white",
                  fontSize: "16px",
                  lineHeight: "1.5",
                }}
              >
                {aiResponse}
              </div>
            ) : (
              conversation.map((msg, index) => (
                <div
                  key={index}
                  style={{
                    background:
                      msg.role === "user"
                        ? "rgba(59, 130, 246, 0.2)"
                        : "rgba(255, 255, 255, 0.1)",
                    padding: "16px",
                    borderRadius: "12px",
                    color: "white",
                    fontSize: "16px",
                    lineHeight: "1.5",
                    alignSelf: msg.role === "user" ? "flex-end" : "flex-start",
                    maxWidth: "80%",
                  }}
                >
                  <div
                    style={{
                      fontSize: "12px",
                      color: "#9ca3af",
                      marginBottom: "4px",
                    }}
                  >
                    {msg.role === "user" ? "You" : "AI Customer"}
                  </div>
                  {msg.content}
                </div>
              ))
            )}
          </div>
        </div>

        <div
          style={{
            display: "flex",
            gap: "12px",
            alignItems: "center",
          }}
        >
          <button
            onClick={() => {
              setIsSessionActive(false);
              setActiveTab("configure");

              if (websocketRef.current) {
                websocketRef.current.close();
              }
            }}
            style={{
              flex: 1,
              padding: "16px",
              background: "linear-gradient(135deg, #ef4444, #dc2626)",
              color: "white",
              border: "none",
              borderRadius: "12px",
              fontWeight: "600",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: "8px",
            }}
          >
            <MicOff size={20} />
            End Session
          </button>
          <button
            onClick={handleRecord}
            disabled={!isSessionActive}
            style={{
              flex: 2,
              padding: "16px",
              background: isRecording
                ? "linear-gradient(135deg, #ef4444, #dc2626)"
                : "linear-gradient(135deg, #22c55e, #059669)",
              color: "white",
              border: "none",
              borderRadius: "12px",
              fontWeight: "600",
              cursor: "pointer",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              gap: "8px",
              opacity: !isSessionActive ? 0.5 : 1,
            }}
          >
            <Mic size={20} />
            {isRecording ? "Stop Recording" : "Start Recording"}
          </button>
        </div>
      </div>

      {/* Quick Tips */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #eab308, #ca8a04)",
            }}
          >
            <Sparkles size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>AI Coaching Tips</h2>
            <p style={styles.subtitle}>Real-time guidance</p>
          </div>
        </div>

        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "12px",
          }}
        >
          {[
            "Acknowledge their time concern first",
            "Ask about their current financial goals",
            "Focus on value, not features",
            "Use their name if provided",
          ].map((tip, index) => (
            <div
              key={index}
              style={{
                padding: "12px 16px",
                background: "rgba(234, 179, 8, 0.2)",
                borderRadius: "12px",
                color: "#fbbf24",
                fontSize: "14px",
                display: "flex",
                alignItems: "center",
                gap: "8px",
              }}
            >
              <div
                style={{
                  width: "6px",
                  height: "6px",
                  background: "#fbbf24",
                  borderRadius: "50%",
                }}
              ></div>
              {tip}
            </div>
          ))}
        </div>
      </div>
    </>
  );

  const renderAnalyticsTab = () => (
    <>
      {/* Performance Overview */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #06b6d4, #0891b2)",
            }}
          >
            <BarChart3 size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Performance Dashboard</h2>
            <p style={styles.subtitle}>Your comprehensive training analytics</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "16px",
            marginBottom: "24px",
          }}
        >
          <div
            style={{
              background: "rgba(34, 197, 94, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#22c55e",
                marginBottom: "8px",
              }}
            >
              {realAnalytics.totalSessions}
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Total Sessions
            </div>
          </div>
          <div
            style={{
              background: "rgba(59, 130, 246, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#3b82f6",
                marginBottom: "8px",
              }}
            >
              {analyticsData.averageScore}%
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Average Score
            </div>
          </div>
          <div
            style={{
              background: "rgba(139, 92, 246, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#8b5cf6",
                marginBottom: "8px",
              }}
            >
              {analyticsData.totalHours}h
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>
              Training Hours
            </div>
          </div>
          <div
            style={{
              background: "rgba(244, 63, 94, 0.2)",
              padding: "20px",
              borderRadius: "16px",
              textAlign: "center",
            }}
          >
            <div
              style={{
                fontSize: "32px",
                fontWeight: "bold",
                color: "#f43f5e",
                marginBottom: "8px",
              }}
            >
              {analyticsData.streak}
            </div>
            <div style={{ color: "#9ca3af", fontSize: "14px" }}>Day Streak</div>
          </div>
        </div>

        {/* Progress Chart */}
        <div
          style={{
            background: "rgba(255, 255, 255, 0.05)",
            borderRadius: "16px",
            padding: "20px",
            marginBottom: "20px",
          }}
        >
          <h3
            style={{
              color: "white",
              fontSize: "16px",
              fontWeight: "600",
              marginBottom: "16px",
            }}
          >
            Monthly Progress Trend
          </h3>
          <div
            style={{
              display: "flex",
              alignItems: "end",
              gap: "12px",
              height: "120px",
            }}
          >
            {analyticsData.monthlyProgress.map((month, index) => (
              <div
                key={index}
                style={{
                  flex: 1,
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                }}
              >
                <div
                  style={{
                    width: "100%",
                    background: `linear-gradient(to top, #3b82f6, #8b5cf6)`,
                    borderRadius: "8px 8px 4px 4px",
                    height: `${month.score}%`,
                    minHeight: "20px",
                    marginBottom: "8px",
                    position: "relative",
                  }}
                >
                  <div
                    style={{
                      position: "absolute",
                      top: "-25px",
                      left: "50%",
                      transform: "translateX(-50%)",
                      color: "white",
                      fontSize: "12px",
                      fontWeight: "600",
                    }}
                  >
                    {month.score}%
                  </div>
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "12px",
                    fontWeight: "500",
                  }}
                >
                  {month.month}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Skill Analysis with Trends */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #f97316, #ea5804)",
            }}
          >
            <Target size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Skill Analysis</h2>
            <p style={styles.subtitle}>Detailed performance breakdown</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
          {realAnalytics.skillBreakdown.map((skill, index) => (
            <div
              key={index}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "20px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "16px",
              }}
            >
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                    marginBottom: "8px",
                  }}
                >
                  <div
                    style={{
                      color: "white",
                      fontWeight: "600",
                      fontSize: "16px",
                    }}
                  >
                    {skill.skill}
                  </div>
                  <div
                    style={{
                      padding: "2px 8px",
                      borderRadius: "12px",
                      background:
                        skill.trend === "up"
                          ? "rgba(34, 197, 94, 0.2)"
                          : "rgba(239, 68, 68, 0.2)",
                      color: skill.trend === "up" ? "#22c55e" : "#ef4444",
                      fontSize: "12px",
                      fontWeight: "600",
                    }}
                  >
                    {skill.improvement}
                  </div>
                </div>
                <div
                  style={{
                    width: "100%",
                    height: "12px",
                    background: "rgba(255, 255, 255, 0.1)",
                    borderRadius: "6px",
                    overflow: "hidden",
                    position: "relative",
                  }}
                >
                  <div
                    style={{
                      width: `${skill.lastWeek}%`,
                      height: "100%",
                      background: "rgba(255, 255, 255, 0.3)",
                      position: "absolute",
                    }}
                  ></div>
                  <div
                    style={{
                      width: `${skill.score}%`,
                      height: "100%",
                      background:
                        skill.score >= 80
                          ? "linear-gradient(90deg, #22c55e, #059669)"
                          : skill.score >= 60
                            ? "linear-gradient(90deg, #eab308, #ca8a04)"
                            : "linear-gradient(90deg, #ef4444, #dc2626)",
                      transition: "width 0.5s ease",
                    }}
                  ></div>
                </div>
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    marginTop: "4px",
                    fontSize: "12px",
                    color: "#9ca3af",
                  }}
                >
                  <span>Last week: {skill.lastWeek}%</span>
                  <span>Current: {skill.score}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Persona Performance */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #ec4899, #db2777)",
            }}
          >
            <User size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Customer Persona Analysis</h2>
            <p style={styles.subtitle}>Performance by customer type</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "16px",
          }}
        >
          {analyticsData.personaPerformance.map((persona, index) => (
            <div
              key={index}
              style={{
                padding: "16px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
              }}
            >
              <div
                style={{
                  color: "white",
                  fontWeight: "600",
                  marginBottom: "8px",
                  fontSize: "14px",
                }}
              >
                {persona.persona}
              </div>
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  marginBottom: "8px",
                }}
              >
                <span style={{ color: "#9ca3af", fontSize: "12px" }}>
                  {persona.sessions} sessions
                </span>
                <span
                  style={{
                    color:
                      persona.avgScore >= 80
                        ? "#22c55e"
                        : persona.avgScore >= 60
                          ? "#eab308"
                          : "#ef4444",
                    fontWeight: "bold",
                    fontSize: "14px",
                  }}
                >
                  {persona.avgScore}%
                </span>
              </div>
              <div
                style={{
                  width: "100%",
                  height: "4px",
                  background: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "2px",
                  overflow: "hidden",
                }}
              >
                <div
                  style={{
                    width: `${persona.winRate}%`,
                    height: "100%",
                    background: "linear-gradient(90deg, #3b82f6, #8b5cf6)",
                  }}
                ></div>
              </div>
              <div
                style={{
                  color: "#9ca3af",
                  fontSize: "12px",
                  marginTop: "4px",
                }}
              >
                {persona.winRate}% success rate
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Product Performance */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #10b981, #059669)",
            }}
          >
            <CreditCard size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Product Performance</h2>
            <p style={styles.subtitle}>Success rates by product type</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
          {analyticsData.productPerformance.map((product, index) => (
            <div
              key={index}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "16px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
              }}
            >
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    color: "white",
                    fontWeight: "600",
                    marginBottom: "4px",
                  }}
                >
                  {product.product}
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "14px",
                    marginBottom: "8px",
                  }}
                >
                  {product.sessions} sessions • Avg score: {product.avgScore}%
                </div>
                <div
                  style={{
                    width: "100%",
                    height: "6px",
                    background: "rgba(255, 255, 255, 0.1)",
                    borderRadius: "3px",
                    overflow: "hidden",
                  }}
                >
                  <div
                    style={{
                      width: `${product.conversionRate}%`,
                      height: "100%",
                      background: "linear-gradient(90deg, #22c55e, #059669)",
                    }}
                  ></div>
                </div>
              </div>
              <div style={{ marginLeft: "16px", textAlign: "right" }}>
                <div
                  style={{
                    color: "#22c55e",
                    fontWeight: "bold",
                    fontSize: "16px",
                  }}
                >
                  {product.conversionRate}%
                </div>
                <div
                  style={{
                    color: "#9ca3af",
                    fontSize: "12px",
                  }}
                >
                  conversion
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Recent Sessions with Enhanced Details */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #8b5cf6, #7c3aed)",
            }}
          >
            <BarChart3 size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Recent Session Details</h2>
            <p style={styles.subtitle}>Comprehensive session breakdown</p>
          </div>
        </div>

        <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
          {analyticsData.recentSessions.map((session, index) => (
            <div
              key={index}
              style={{
                padding: "20px",
                background: "rgba(255, 255, 255, 0.05)",
                borderRadius: "16px",
                border:
                  index === 0
                    ? "2px solid rgba(34, 197, 94, 0.3)"
                    : "1px solid rgba(255, 255, 255, 0.1)",
              }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  marginBottom: "12px",
                }}
              >
                <div>
                  <div
                    style={{
                      color: "white",
                      fontWeight: "600",
                      fontSize: "16px",
                      marginBottom: "4px",
                    }}
                  >
                    {session.product}
                  </div>
                  <div
                    style={{
                      color: "#9ca3af",
                      fontSize: "14px",
                    }}
                  >
                    {session.persona} • {session.date}
                  </div>
                </div>
                <div
                  style={{
                    padding: "8px 16px",
                    borderRadius: "20px",
                    background:
                      session.score >= 80
                        ? "rgba(34, 197, 94, 0.2)"
                        : session.score >= 60
                          ? "rgba(234, 179, 8, 0.2)"
                          : "rgba(239, 68, 68, 0.2)",
                    color:
                      session.score >= 80
                        ? "#22c55e"
                        : session.score >= 60
                          ? "#eab308"
                          : "#ef4444",
                    fontWeight: "bold",
                  }}
                >
                  {session.score}%
                </div>
              </div>

              <div
                style={{
                  display: "grid",
                  gridTemplateColumns: "repeat(3, 1fr)",
                  gap: "12px",
                }}
              >
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color: "#3b82f6",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.duration}
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Duration
                  </div>
                </div>
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color: "#f97316",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.objections}
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Objections
                  </div>
                </div>
                <div
                  style={{
                    background: "rgba(255, 255, 255, 0.05)",
                    padding: "12px",
                    borderRadius: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    style={{
                      color:
                        session.closingRate >= 70
                          ? "#22c55e"
                          : session.closingRate >= 50
                            ? "#eab308"
                            : "#ef4444",
                      fontWeight: "bold",
                      fontSize: "14px",
                    }}
                  >
                    {session.closingRate}%
                  </div>
                  <div style={{ color: "#9ca3af", fontSize: "12px" }}>
                    Closing Rate
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Achievements */}
      <div style={styles.card}>
        <div style={styles.cardHeader}>
          <div
            style={{
              ...styles.iconContainer,
              background: "linear-gradient(135deg, #eab308, #ca8a04)",
            }}
          >
            <Sparkles size={24} color="white" />
          </div>
          <div>
            <h2 style={styles.cardTitle}>Achievements</h2>
            <p style={styles.subtitle}>Your training milestones</p>
          </div>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(2, 1fr)",
            gap: "12px",
          }}
        >
          {analyticsData.achievements.map((achievement, index) => (
            <div
              key={index}
              style={{
                padding: "16px",
                background: achievement.unlocked
                  ? "rgba(234, 179, 8, 0.2)"
                  : "rgba(255, 255, 255, 0.05)",
                borderRadius: "12px",
                border: achievement.unlocked
                  ? "1px solid rgba(234, 179, 8, 0.3)"
                  : "1px solid rgba(255, 255, 255, 0.1)",
                opacity: achievement.unlocked ? 1 : 0.6,
              }}
            >
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "8px",
                  marginBottom: "8px",
                }}
              >
                <div
                  style={{
                    width: "24px",
                    height: "24px",
                    borderRadius: "50%",
                    background: achievement.unlocked ? "#eab308" : "#6b7280",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontSize: "12px",
                  }}
                >
                  {achievement.unlocked ? "🏆" : "🔒"}
                </div>
                <div
                  style={{
                    color: achievement.unlocked ? "#fbbf24" : "#9ca3af",
                    fontWeight: "600",
                    fontSize: "14px",
                  }}
                >
                  {achievement.title}
                </div>
              </div>
              <div
                style={{
                  color: "#9ca3af",
                  fontSize: "12px",
                }}
              >
                {achievement.description}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );

  const styles = {
    container: {
      minHeight: "100vh",
      background:
        "linear-gradient(135deg, #0f172a 0%, #581c87 50%, #0f172a 100%)",
      position: "relative",
      overflow: "hidden",
      fontFamily: "system-ui, -apple-system, sans-serif",
    },
    backgroundBlob1: {
      position: "absolute",
      top: "-160px",
      right: "-160px",
      width: "320px",
      height: "320px",
      background: "#8b5cf6",
      borderRadius: "50%",
      filter: "blur(60px)",
      opacity: 0.2,
      animation: "pulse 3s infinite",
    },
    backgroundBlob2: {
      position: "absolute",
      bottom: "-160px",
      left: "-160px",
      width: "320px",
      height: "320px",
      background: "#3b82f6",
      borderRadius: "50%",
      filter: "blur(60px)",
      opacity: 0.2,
      animation: "pulse 3s infinite 2s",
    },
    header: {
      position: "relative",
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderBottom: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "24px",
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
    },
    headerTitle: {
      display: "flex",
      alignItems: "center",
      gap: "12px",
    },
    iconContainer: {
      width: "48px",
      height: "48px",
      background: "linear-gradient(135deg, #3b82f6, #8b5cf6)",
      borderRadius: "16px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "0 10px 25px rgba(0, 0, 0, 0.3)",
    },
    title: {
      fontSize: "24px",
      fontWeight: "bold",
      color: "white",
      margin: 0,
    },
    subtitle: {
      fontSize: "14px",
      color: "#c4b5fd",
      margin: 0,
    },
    statusIndicator: {
      display: "flex",
      alignItems: "center",
      gap: "8px",
    },
    statusDot: {
      width: "12px",
      height: "12px",
      background: "#4ade80",
      borderRadius: "50%",
      animation: "pulse 2s infinite",
    },
    content: {
      position: "relative",
      padding: "24px",
      paddingBottom: "120px",
      display: "flex",
      flexDirection: "column",
      gap: "24px",
    },
    card: {
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderRadius: "24px",
      border: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "24px",
      boxShadow: "0 25px 50px rgba(0, 0, 0, 0.3)",
    },
    cardHeader: {
      display: "flex",
      alignItems: "center",
      gap: "12px",
      marginBottom: "24px",
    },
    cardTitle: {
      fontSize: "20px",
      fontWeight: "bold",
      color: "white",
      margin: 0,
    },
    optionButton: {
      width: "100%",
      padding: "20px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      marginBottom: "16px",
      display: "flex",
      alignItems: "center",
      gap: "16px",
      textAlign: "left",
    },
    selectedButton: {
      border: "2px solid rgba(255, 255, 255, 0.4)",
      background: "rgba(255, 255, 255, 0.2)",
      boxShadow: "0 20px 40px rgba(0, 0, 0, 0.3)",
      transform: "scale(1.02)",
    },
    personaIcon: {
      width: "56px",
      height: "56px",
      borderRadius: "16px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      boxShadow: "0 10px 25px rgba(0, 0, 0, 0.3)",
    },
    personaContent: {
      flex: 1,
    },
    personaName: {
      fontSize: "18px",
      fontWeight: "bold",
      marginBottom: "4px",
    },
    personaDescription: {
      fontSize: "14px",
      color: "#c4b5fd",
      marginBottom: "8px",
    },
    tags: {
      display: "flex",
      gap: "8px",
    },
    tag: {
      background: "rgba(255, 255, 255, 0.2)",
      padding: "4px 8px",
      borderRadius: "12px",
      fontSize: "12px",
      color: "#e9d5ff",
    },
    difficultyGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)",
      gap: "12px",
    },
    difficultyButton: {
      padding: "16px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      textAlign: "center",
    },
    difficultyDot: {
      width: "32px",
      height: "32px",
      borderRadius: "50%",
      margin: "0 auto 8px",
    },
    voiceToggle: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      marginBottom: "24px",
    },
    toggleSwitch: {
      position: "relative",
      width: "64px",
      height: "32px",
      borderRadius: "20px",
      cursor: "pointer",
      transition: "background-color 0.3s ease",
    },
    toggleHandle: {
      position: "absolute",
      width: "24px",
      height: "24px",
      background: "white",
      borderRadius: "50%",
      top: "4px",
      transition: "transform 0.3s ease",
    },
    voiceGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)",
      gap: "12px",
      marginBottom: "24px",
    },
    toneGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(2, 1fr)",
      gap: "12px",
    },
    voiceButton: {
      padding: "16px",
      borderRadius: "16px",
      border: "2px solid rgba(255, 255, 255, 0.1)",
      background: "rgba(255, 255, 255, 0.05)",
      color: "white",
      cursor: "pointer",
      transition: "all 0.3s ease",
      textAlign: "center",
    },
    startButton: {
      width: "100%",
      background: "linear-gradient(135deg, #2563eb, #8b5cf6, #06b6d4)",
      color: "white",
      padding: "24px",
      borderRadius: "24px",
      border: "none",
      fontSize: "20px",
      fontWeight: "bold",
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      gap: "16px",
      boxShadow: "0 25px 50px rgba(139, 92, 246, 0.3)",
      transition: "all 0.3s ease",
      position: "relative",
      overflow: "hidden",
    },
    bottomNav: {
      position: "fixed",
      bottom: 0,
      left: 0,
      right: 0,
      background: "rgba(255, 255, 255, 0.1)",
      backdropFilter: "blur(20px)",
      borderTop: "1px solid rgba(255, 255, 255, 0.2)",
      padding: "16px 24px",
      display: "flex",
      justifyContent: "space-around",
    },
    navButton: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      gap: "8px",
      padding: "12px",
      borderRadius: "16px",
      background: "rgba(255, 255, 255, 0.2)",
      color: "#60a5fa",
      border: "none",
      cursor: "pointer",
      fontSize: "12px",
      fontWeight: "600",
    },
  };

  return (
    <div style={styles.container}>
      <style>
        {`
          @keyframes pulse {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 0.4; }
          }

          button:hover {
            transform: translateY(-2px);
          }
        `}
      </style>

      {/* Animated Background */}
      <div style={styles.backgroundBlob1}></div>
      <div style={styles.backgroundBlob2}></div>

      {/* Header */}
      <div style={styles.header}>
        <div style={styles.headerTitle}>
          <div style={styles.iconContainer}>
            <Brain size={24} color="white" />
          </div>
          <div>
            <h1 style={styles.title}>AI Sales Trainer</h1>
            <p style={styles.subtitle}>
              Master your pitch with virtual customers
            </p>
          </div>
        </div>
        <div style={styles.statusIndicator}>
          <div style={styles.statusDot}></div>
          <span
            style={{ color: "#4ade80", fontSize: "14px", fontWeight: "500" }}
          >
            AI Ready
          </span>
        </div>
      </div>

      <div style={styles.content}>
        {activeTab === "configure" && renderConfigureTab()}
        {activeTab === "practice" && renderPracticeTab()}
        {activeTab === "analytics" && renderAnalyticsTab()}
      </div>

      {/* Bottom Navigation */}
      <div style={styles.bottomNav}>
        <button
          onClick={() => setActiveTab("configure")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "configure"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "configure"
                ? "#60a5fa"
                : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <Settings size={24} />
          <span>Configure</span>
        </button>
        <button
          onClick={() => setActiveTab("practice")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "practice"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "practice" ? "#60a5fa" : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <Play size={24} />
          <span>Practice</span>
        </button>
        <button
          onClick={() => setActiveTab("analytics")}
          style={{
            ...styles.navButton,
            background:
              activeTab === "analytics"
                ? "rgba(255, 255, 255, 0.2)"
                : "transparent",
            color:
              activeTab === "analytics"
                ? "#60a5fa"
                : "rgba(255, 255, 255, 0.6)",
          }}
        >
          <BarChart3 size={24} />
          <span>Analytics</span>
        </button>
      </div>
    </div>
  );
};

export default FintechTrainingApp;
